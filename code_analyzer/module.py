from aiogram import Router, types
from aiogram.filters import Command
import logging
from logging.handlers import RotatingFileHandler
import os
import sqlite3
import ast
import re
from datetime import datetime
from core.modules import get_loaded_modules

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å black, –Ω–æ —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
try:
    import black
    BLACK_AVAILABLE = True
except ImportError:
    BLACK_AVAILABLE = False
    black = None

router = Router()
logger = logging.getLogger("modules.code_analyzer")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è
log_handler = RotatingFileHandler(
    os.path.join(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")), "data", "code_analyzer.log"),
    maxBytes=5*1024*1024,  # 5 MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    backupCount=5,         # –•—Ä–∞–Ω–∏—Ç—å –¥–æ 5 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    encoding="utf-8"
)
log_handler.setLevel(logging.INFO)
log_formatter = logging.Formatter("%(asctime)s - %(message)s")
log_handler.setFormatter(log_formatter)
logger.addHandler(log_handler)
logger.setLevel(logging.INFO)

data = None
DB_PATH = None

def setup(d):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è CodeAnalyzer."""
    global data, DB_PATH
    dp = d["dp"]
    data = d
    DB_PATH = os.path.join(data["base_dir"], "data", "code_analyzer.db")
    logger.info(f"üìÇ DB_PATH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {DB_PATH}")
    init_db()
    dp.include_router(router)
    logger.info("üõ† –ú–æ–¥—É–ª—å CodeAnalyzer –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞."""
    if DB_PATH is None:
        logger.error("‚ùå DB_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        raise ValueError("DB_PATH must be set before initializing the database")
    logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS analysis_history 
                      (chat_id INTEGER, code TEXT, result TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()
    logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CodeAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def get_commands():
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è CodeAnalyzer."""
    return [
        types.BotCommand(command="analyze", description="üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (Python)"),
        types.BotCommand(command="format", description="üñåÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (Python)"),
        types.BotCommand(command="clear_analysis", description="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ (–∞–¥–º–∏–Ω)")
    ]

def save_analysis(chat_id, code, result):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO analysis_history (chat_id, code, result) VALUES (?, ?, ?)", 
                       (chat_id, code, result))
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id
        cursor.execute("""
            DELETE FROM analysis_history 
            WHERE chat_id = ? AND timestamp NOT IN (
                SELECT timestamp FROM analysis_history 
                WHERE chat_id = ? 
                ORDER BY timestamp DESC 
                LIMIT 5
            )
        """, (chat_id, chat_id))
        conn.commit()
        conn.close()
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}: {e}")

def get_analysis_history(chat_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞."""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT code, result, timestamp FROM analysis_history WHERE chat_id = ? ORDER BY timestamp DESC LIMIT 5", 
                       (chat_id,))
        history = cursor.fetchall()
        conn.close()
        return history
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}: {e}")
        return []

def check_syntax(code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python-–∫–æ–¥–∞."""
    try:
        ast.parse(code)
        return True, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚úÖ"
    except SyntaxError as e:
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)} ‚ùå\n" \
                      f"–°—Ç—Ä–æ–∫–∞: {e.lineno}, –ø–æ–∑–∏—Ü–∏—è: {e.offset}"

def analyze_code(code):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    is_valid, syntax_result = check_syntax(code)
    recommendations = []

    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if ".format(" in code:
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–º–µ—Å—Ç–æ .format() –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ f-—Å—Ç—Ä–æ–∫–∏ (f-strings) –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: f'Hello {name}' –≤–º–µ—Å—Ç–æ 'Hello {}'.format(name).")
    if "print (" in code:
        recommendations.append("–ó–∞–º–µ—á–∞–Ω–∏–µ: –í Python –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ print –Ω–µ –Ω—É–∂–µ–Ω, —ç—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PEP 8. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: print().")
    if "  " in code:
        recommendations.append("–ó–∞–º–µ—á–∞–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã. –°–æ–≥–ª–∞—Å–Ω–æ PEP 8, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.")
    if "if(" in code or "for(" in code:
        recommendations.append("–ó–∞–º–µ—á–∞–Ω–∏–µ: –ü–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (if, for –∏ —Ç.–¥.) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–±–µ–ª. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: if (—É—Å–ª–æ–≤–∏–µ), –∞ –Ω–µ if(—É—Å–ª–æ–≤–∏–µ).")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:</b>\n\n" \
             f"<b>–°–∏–Ω—Ç–∞–∫—Å–∏—Å:</b> {syntax_result}\n\n"
    
    if recommendations:
        result += "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>\n" + "\n".join([f"- {rec}" for rec in recommendations])
    else:
        result += "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ! üòä"

    return result

def format_code(code):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é black."""
    if not BLACK_AVAILABLE:
        return False, "‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é `pip install black`."
    
    try:
        formatted = black.format_str(code, mode=black.FileMode())
        return True, formatted
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"

@router.message(Command("analyze"))
async def analyze_command(message: types.Message):
    """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞."""
    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if 'infosystem' in get_loaded_modules():
        from modules.infosystem.module import increment_stat
        increment_stat("commands_executed")
    else:
        logger.warning("–ú–æ–¥—É–ª—å infosystem –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ commands_executed")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("üìù –£–∫–∞–∂–∏ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–∏–º–µ—Ä: <code>/analyze print('Hello')</code>", parse_mode="HTML")
        return
    
    code = args[1].strip()
    if not code:
        await message.answer("üìù –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", parse_mode="HTML")
        return

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    result = analyze_code(code)
    save_analysis(message.chat.id, code, result)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–∞
    history = get_analysis_history(message.chat.id)
    history_text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã (–¥–æ 5):</b>\n"
    for idx, (hist_code, hist_result, timestamp) in enumerate(history, 1):
        history_text += f"{idx}. <code>{hist_code[:50]}...</code> ({timestamp})\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"{result}\n\n{history_text}",
        parse_mode="HTML"
    )
    logger.info(f"üîç –ö–æ–¥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.from_user.id}: {code[:50]}...")

@router.message(Command("format"))
async def format_command(message: types.Message):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞."""
    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if 'infosystem' in get_loaded_modules():
        from modules.infosystem.module import increment_stat
        increment_stat("commands_executed")
    else:
        logger.warning("–ú–æ–¥—É–ª—å infosystem –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ commands_executed")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("üìù –£–∫–∞–∂–∏ –∫–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <code>/format print('Hello')</code>", parse_mode="HTML")
        return
    
    code = args[1].strip()
    if not code:
        await message.answer("üìù –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", parse_mode="HTML")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    success, result = format_code(code)
    if success:
        formatted_code = result
        await message.answer(
            f"üñåÔ∏è <b>–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:</b>\n\n<code>{formatted_code}</code>",
            parse_mode="HTML"
        )
        logger.info(f"üñåÔ∏è –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.from_user.id}: {code[:50]}...")
    else:
        await message.answer(result, parse_mode="HTML")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {message.from_user.id}: {result}")

@router.message(Command("clear_analysis"))
async def clear_analysis_command(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if message.from_user.id not in data["admin_ids"]:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!", parse_mode="HTML")
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ /clear_analysis –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {message.from_user.id}")
        return

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if 'infosystem' in get_loaded_modules():
        from modules.infosystem.module import increment_stat
        increment_stat("commands_executed")
    else:
        logger.warning("–ú–æ–¥—É–ª—å infosystem –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ commands_executed")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("üìù –£–∫–∞–∂–∏ chat_id –¥–ª—è –æ—á–∏—Å—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä: <code>/clear_analysis 123456789</code>", parse_mode="HTML")
        return
    
    try:
        chat_id = int(args[1])
    except ValueError:
        await message.answer("üìù chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!", parse_mode="HTML")
        return

    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM analysis_history WHERE chat_id = ?", (chat_id,))
        deleted = conn.total_changes
        conn.commit()
        conn.close()
        await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ <code>{deleted}</code> –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}.", parse_mode="HTML")
        logger.info(f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è chat_id {chat_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", parse_mode="HTML")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è chat_id {chat_id}: {e}")

async def on_startup(d):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è."""
    logger.info("üöÄ –ú–æ–¥—É–ª—å CodeAnalyzer –∑–∞–ø—É—â–µ–Ω.")
    if not BLACK_AVAILABLE:
        logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ö–æ–º–∞–Ω–¥–∞ /format –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

async def on_shutdown(d):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
    logger.info("üì¥ –ú–æ–¥—É–ª—å CodeAnalyzer –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")