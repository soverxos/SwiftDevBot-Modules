# /modules/code_analyzer/module.py

import logging
from logging.handlers import RotatingFileHandler
import os
import asyncio # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
import aiosqlite # –ó–∞–º–µ–Ω–∞ sqlite3
import ast
import re
from datetime import datetime

from aiogram import Router, types, F
from aiogram.filters import Command

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å black, –Ω–æ —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
try:
    import black
    BLACK_AVAILABLE = True
except ImportError:
    BLACK_AVAILABLE = False
    black = None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º None, –µ—Å–ª–∏ black –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# --- –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≤–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—é–¥–∞,
# –æ—Å–Ω–æ–≤–Ω–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –≤ —è–¥—Ä–µ.
logger.setLevel(logging.DEBUG)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É—Ç–∏ –∫ –ë–î, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ setup
DB_PATH = None

# --- –†–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è ---
router = Router()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def init_db(kernel_data: dict):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ setup.
    """
    global DB_PATH
    if DB_PATH is None:
         logger.error("‚ùå DB_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
         # –í –∏–¥–µ–∞–ª–µ, –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—Å–∫
         return

    db = kernel_data.get("db") # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ —è–¥—Ä–∞
    if db is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏–∑ kernel_data –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ code_analyzer.db")
        return

    try:
        await db.execute('''CREATE TABLE IF NOT EXISTS analysis_history
                          (id INTEGER PRIMARY KEY AUTOINCREMENT,
                           chat_id INTEGER NOT NULL,
                           code TEXT,
                           result TEXT,
                           timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ chat_id
        await db.execute("CREATE INDEX IF NOT EXISTS idx_analysis_chat_id ON analysis_history (chat_id)")
        await db.commit()
        logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ 'analysis_history' –¥–ª—è CodeAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.")
    except aiosqlite.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã 'analysis_history': {e}", exc_info=True)

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
async def save_analysis(kernel_data: dict, chat_id: int, code: str, result: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    db = kernel_data.get("db")
    if db is None:
        logger.error("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    try:
        async with db.execute("INSERT INTO analysis_history (chat_id, code, result) VALUES (?, ?, ?)",
                              (chat_id, code, result)) as cursor:
            pass # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)
        limit = 10
        async with db.execute("""
            DELETE FROM analysis_history
            WHERE chat_id = ? AND id NOT IN (
                SELECT id FROM analysis_history
                WHERE chat_id = ?
                ORDER BY timestamp DESC
                LIMIT ?
            )
        """, (chat_id, chat_id, limit)) as cursor:
             pass # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

        await db.commit()
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}")
    except aiosqlite.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)

async def get_analysis_history(kernel_data: dict, chat_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    db = kernel_data.get("db")
    if db is None:
        logger.error("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.")
        return []

    try:
        async with db.execute("SELECT code, result, timestamp FROM analysis_history WHERE chat_id = ? ORDER BY timestamp DESC LIMIT 5",
                              (chat_id,)) as cursor:
            history = await cursor.fetchall()
        return history
    except aiosqlite.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        return []

async def clear_analysis_history(kernel_data: dict, chat_id: int) -> int:
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫."""
    db = kernel_data.get("db")
    if db is None:
        logger.error("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.")
        return 0

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        async with db.execute("SELECT COUNT(*) FROM analysis_history WHERE chat_id = ?", (chat_id,)) as cursor:
            count_result = await cursor.fetchone()
            count_to_delete = count_result[0] if count_result else 0

        if count_to_delete > 0:
            async with db.execute("DELETE FROM analysis_history WHERE chat_id = ?", (chat_id,)) as cursor:
                pass # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            await db.commit()
            logger.info(f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è chat_id {chat_id}. –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {count_to_delete}")
            return count_to_delete
        else:
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id} —É–∂–µ –ø—É—Å—Ç–∞.")
            return 0
    except aiosqlite.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (—Ö–æ—Ç—è commit –≤—ã—à–µ)
        try: await db.rollback()
        except: pass
        raise e # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–¥—É–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è) ---
def check_syntax(code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python-–∫–æ–¥–∞."""
    try:
        ast.parse(code)
        return True, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚úÖ"
    except SyntaxError as e:
        # –£–ª—É—á—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_line = e.text.strip() if e.text else "[—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞]"
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: `{e.msg}` ‚ùå\n" \
                      f"–°—Ç—Ä–æ–∫–∞: {e.lineno}, –ü–æ–∑–∏—Ü–∏—è: {e.offset}\n" \
                      f"–ö–æ–¥: `{error_line}`"

def analyze_code(code):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    is_valid, syntax_result = check_syntax(code)
    recommendations = []

    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫ —Ç–∏–ø–∞ pylint/flake8, –Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç)
    if ".format(" in code and "f'" not in code and 'f"' not in code: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–∂–µ f-—Å—Ç—Ä–æ–∫–∏
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ f-—Å—Ç—Ä–æ–∫ (f'...' –∏–ª–∏ f\"...\") –≤–º–µ—Å—Ç–æ `.format()` –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.")
    if re.search(r"print\s+\(", code): # –ò—â–µ–º 'print ('
        recommendations.append("–ó–∞–º–µ—á–∞–Ω–∏–µ: –ü—Ä–æ–±–µ–ª –º–µ–∂–¥—É `print` –∏ —Å–∫–æ–±–∫–æ–π `(` –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PEP 8.")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã (–ø—Ä–æ—Å—Ç–∞—è)
    lines = code.splitlines()
    has_tabs = any("\t" in line for line in lines)
    has_spaces_indent = any(line.startswith(" ") for line in lines)
    if has_tabs and has_spaces_indent:
         recommendations.append("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–º–µ—à–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–±–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã (4 –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å).")
    elif has_tabs:
         recommendations.append("–ó–∞–º–µ—á–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–∞–±—ã –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤. PEP 8 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
    result = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:**\n\n" \
             f"**–°–∏–Ω—Ç–∞–∫—Å–∏—Å:** {syntax_result}\n\n" # syntax_result —É–∂–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å Markdown

    if recommendations:
        result += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**\n" + "\n".join([f"‚Ä¢ {rec}" for rec in recommendations]) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
    elif is_valid: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–µ—Ä–µ–Ω
        result += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø–ª–æ—Ö–æ! üëç"
    else:
        result += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏."

    return result

def format_code(code):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é black (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    if not BLACK_AVAILABLE:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ black.")
        return False, "‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `black` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        mode = black.FileMode(line_length=88) # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è black
        formatted_code = black.format_str(code, mode=mode)
        if code == formatted_code:
             return True, (formatted_code, True) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂: (–∫–æ–¥, —Ñ–ª–∞–≥_–±–µ–∑_–∏–∑–º–µ–Ω–µ–Ω–∏–π)
        else:
             return True, (formatted_code, False)
    except black.NothingChanged:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å, –µ—Å–ª–∏ –∫–æ–¥ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
        return True, (code, True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ black –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: `{str(e)}`"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(Command("analyze"))
async def analyze_command(message: types.Message, kernel_data: dict):
    """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    code = message.text.replace(f"/{message.command}", "", 1).strip() # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    if not code:
        # –ò—â–µ–º –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message and message.reply_to_message.text:
            code = message.reply_to_message.text.strip()
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏–∑ reply –¥–ª—è {message.from_user.id}")
        elif message.reply_to_message and message.reply_to_message.caption:
             code = message.reply_to_message.caption.strip()
             logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏–∑ caption reply –¥–ª—è {message.from_user.id}")

    if not code:
        await message.reply("üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/analyze` –∏ –ø–æ—Å–ª–µ –Ω–µ—ë –≤–∞—à Python –∫–æ–¥.\n"
                            "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `/analyze` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º.",
                            parse_mode="Markdown")
        return

    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ ```python ... ``` –∏–ª–∏ ``` ... ```
    code = re.sub(r"^```(?:python)?\s*", "", code, flags=re.IGNORECASE)
    code = re.sub(r"\s*```$", "", code)
    code = code.strip()

    if not code:
         await message.reply("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–º–ª–µ–Ω–∏—è ```.")
         return

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    analysis_result = analyze_code(code)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await save_analysis(kernel_data, message.chat.id, code, analysis_result)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    history = await get_analysis_history(kernel_data, message.chat.id)
    history_text = ""
    if history:
        history_text = "\n\n‚è≥ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã (–¥–æ 5):**\n"
        for idx, (hist_code, _, timestamp_str) in enumerate(history, 1):
             try:
                  # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å timestamp –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                  dt_obj = datetime.fromisoformat(timestamp_str)
                  ts_formatted = dt_obj.strftime('%d.%m %H:%M')
             except:
                  ts_formatted = timestamp_str # Fallback
             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞
             code_preview = hist_code.split('\n', 1)[0][:50] # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ 50 —Å–∏–º–≤–æ–ª–æ–≤
             history_text += f"`{idx}`. `{code_preview}...` ({ts_formatted})\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        await message.reply(
            f"{analysis_result}{history_text}",
            parse_mode="Markdown" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
    except TelegramBadRequest as e:
         # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –∏–∑-–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
         if "can't parse entities" in str(e):
             logger.warning(f"–û—à–∏–±–∫–∞ Markdown –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
             await message.reply(f"{analysis_result}{history_text}", parse_mode=None) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown
         else:
             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
             await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞.")

    logger.info(f"üîç –ö–æ–¥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.from_user.id}: {code[:50]}...")

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –º–æ–¥—É–ª—å infosystem –µ—Å—Ç—å)
    loaded_mods = get_loaded_modules()
    if 'infosystem' in loaded_mods and hasattr(loaded_mods['infosystem'], 'increment_stat'):
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è
            await loaded_mods['infosystem'].increment_stat(kernel_data, "code_analyzed")
        except Exception as stat_e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ infosystem: {stat_e}")


@router.message(Command("format"))
async def format_command(message: types.Message, kernel_data: dict):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞."""
    if not BLACK_AVAILABLE:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `black` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", parse_mode='Markdown')
        return

    code = message.text.replace(f"/{message.command}", "", 1).strip()

    if not code:
        if message.reply_to_message and message.reply_to_message.text:
            code = message.reply_to_message.text.strip()
            logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ reply –¥–ª—è {message.from_user.id}")
        elif message.reply_to_message and message.reply_to_message.caption:
             code = message.reply_to_message.caption.strip()
             logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ caption reply –¥–ª—è {message.from_user.id}")

    if not code:
        await message.reply("üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/format` –∏ –ø–æ—Å–ª–µ –Ω–µ—ë –≤–∞—à Python –∫–æ–¥.\n"
                            "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `/format` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º.",
                            parse_mode="Markdown")
        return

    # –£–±–∏—Ä–∞–µ–º ```
    code = re.sub(r"^```(?:python)?\s*", "", code, flags=re.IGNORECASE)
    code = re.sub(r"\s*```$", "", code)
    code = code.strip()

    if not code:
         await message.reply("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–º–ª–µ–Ω–∏—è ```.")
         return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    success, format_result = format_code(code)

    if success:
        formatted_code, no_changes = format_result
        if no_changes:
             response_text = "‚úÖ **–ö–æ–¥ —É–∂–µ –∏–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω!** üëç"
        else:
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞
             response_text = f"üñåÔ∏è **–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:**\n```python\n{formatted_code}\n```"
        logger.info(f"üñåÔ∏è –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.from_user.id}: {code[:50]}...")
    else:
        # format_result —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—É–∂–µ —Å Markdown)
        response_text = format_result
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {message.from_user.id}: {format_result}")

    try:
        await message.reply(response_text, parse_mode="Markdown")
    except TelegramBadRequest as e:
         # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è ```python)
         if "can't parse entities" in str(e):
             logger.warning(f"–û—à–∏–±–∫–∞ Markdown –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
             # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown, –Ω–æ –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–ª–æ—Ö–æ
             await message.reply(response_text.replace("```python", "").replace("```", ""), parse_mode=None)
         else:
             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
             await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    loaded_mods = get_loaded_modules()
    if 'infosystem' in loaded_mods and hasattr(loaded_mods['infosystem'], 'increment_stat'):
        try:
            await loaded_mods['infosystem'].increment_stat(kernel_data, "code_formatted")
        except Exception as stat_e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ infosystem: {stat_e}")


@router.message(Command("clear_analysis"))
async def clear_analysis_command(message: types.Message, kernel_data: dict):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ kernel_data
    if message.from_user.id not in kernel_data.get("admin_ids", []):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ /clear_analysis –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {message.from_user.id}")
        return

    args = message.text.split(maxsplit=1)
    target_chat_id = None

    if len(args) >= 2:
        try:
            target_chat_id = int(args[1])
        except ValueError:
            await message.reply("üìù ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! `/clear_analysis [chat_id]`", parse_mode="Markdown")
            return
    else:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        target_chat_id = message.chat.id
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ ({target_chat_id})")

    try:
        deleted_count = await clear_analysis_history(kernel_data, target_chat_id)
        if deleted_count > 0:
            await message.reply(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ `{deleted_count}` –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ `{target_chat_id}`.", parse_mode="Markdown")
        else:
             await message.reply(f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ `{target_chat_id}` —É–∂–µ –±—ã–ª–∞ –ø—É—Å—Ç–∞.", parse_mode="Markdown")
    except Exception as e:
        # –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ clear_analysis_history
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: `{str(e)}`", parse_mode="Markdown")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    loaded_mods = get_loaded_modules()
    if 'infosystem' in loaded_mods and hasattr(loaded_mods['infosystem'], 'increment_stat'):
        try:
            await loaded_mods['infosystem'].increment_stat(kernel_data, "history_cleared")
        except Exception as stat_e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ infosystem: {stat_e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–¥—É–ª—è ---

def setup(kernel_data: dict):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è CodeAnalyzer."""
    global DB_PATH # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞ –¥–ª—è –º–æ–¥—É–ª—è
    base_dir = kernel_data.get("base_dir", ".") # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    log_dir = os.path.join(base_dir, "data")
    os.makedirs(log_dir, exist_ok=True) # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    module_log_path = os.path.join(log_dir, "code_analyzer.log")

    try:
        log_handler = RotatingFileHandler(
            module_log_path,
            maxBytes=5*1024*1024,  # 5 MB
            backupCount=3,         # 3 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            encoding="utf-8"
        )
        log_handler.setLevel(logging.INFO) # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –º–æ–¥—É–ª—è
        log_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
        log_handler.setFormatter(log_formatter)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É –º–æ–¥—É–ª—è
        logger.addHandler(log_handler)
        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –ª–æ–≥–≥–µ—Ä—É, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        # logger.propagate = False # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ –º–æ–¥—É–ª—è –≤ –æ–±—â–µ–º –ª–æ–≥–µ
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –º–æ–¥—É–ª—è: {module_log_path}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è code_analyzer: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = kernel_data.get("dp")
    if not dp:
         logger.critical("‚ùå –î–∏—Å–ø–µ—Ç—á–µ—Ä (dp) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ kernel_data –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ code_analyzer!")
         return # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –∂–µ)
    DB_PATH = os.path.join(kernel_data["base_dir"], "data", "database.db")
    logger.info(f"üìÇ –ú–æ–¥—É–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ë–î: {DB_PATH}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ–Ω–µ
    # create_task –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ setup –Ω–µ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è init_db
    init_task = asyncio.create_task(init_db(kernel_data))
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–¥–µ-—Ç–æ –µ—â–µ
    # kernel_data.setdefault("module_init_tasks", {})["code_analyzer"] = init_task

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è
    dp.include_router(router)

    logger.info("üõ† –ú–æ–¥—É–ª—å CodeAnalyzer –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–æ—É—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω.")

def get_commands() -> list[dict]:
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è CodeAnalyzer –¥–ª—è CommandRegistry."""
    return [
        {
            "command": "analyze",
            "description": "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Python", # –£–±—Ä–∞–ª–∏ –∏–∫–æ–Ω–∫—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            "admin": False,
            "icon": "üîç" # –ò–∫–æ–Ω–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
        },
        {
            "command": "format",
            "description": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ Python",
            "admin": False,
            "icon": "üñåÔ∏è"
        },
        {
            "command": "clear_analysis",
            "description": "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞",
            "admin": True, # –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            "icon": "üóëÔ∏è"
        }
    ]

async def on_startup(bot, data: dict):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è."""
    logger.info("üöÄ –ú–æ–¥—É–ª—å CodeAnalyzer –∑–∞–ø—É—â–µ–Ω.")
    if not BLACK_AVAILABLE:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º, –µ—Å–ª–∏ black –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        admin_ids = data.get("admin_ids", [])
        for admin_id in admin_ids:
             try:
                  await bot.send_message(admin_id, "‚ö†Ô∏è –ú–æ–¥—É–ª—å CodeAnalyzer: –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `black` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ö–æ–º–∞–Ω–¥–∞ `/format` –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
             except Exception as e:
                  logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ black: {e}")
        logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ö–æ–º–∞–Ω–¥–∞ /format –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

async def on_shutdown(bot, data: dict):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è –º–æ–¥—É–ª—è:
    # if module_db_connection:
    #    await module_db_connection.close()
    logger.info("üì¥ –ú–æ–¥—É–ª—å CodeAnalyzer –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞) ---
# async def my_code_analyzer_task(kernel_data):
#     while True:
#         # ... do something ...
#         await asyncio.sleep(3600) # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ —á–∞—Å

# –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ setup:
# def setup(kernel_data: dict):
#     # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ setup) ...
#     if "background_tasks" in kernel_data:
#         kernel_data["background_tasks"].append(my_code_analyzer_task)
#         logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ my_code_analyzer_task –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.")