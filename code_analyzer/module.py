# /modules/code_analyzer/module.py

import logging
from logging.handlers import RotatingFileHandler
import os
import asyncio
import aiosqlite
import ast
import re
from datetime import datetime
from typing import List, Tuple, Any # –î–æ–±–∞–≤–ª–µ–Ω Type Hinting

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.filters.command import CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —è–¥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. —É–±—Ä–∞–ª–∏ infosystem
# from core.modules import get_loaded_modules

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å black
try:
    import black
    BLACK_AVAILABLE = True
except ImportError:
    BLACK_AVAILABLE = False
    black = None

# --- –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è ---
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG) # –£—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è

# --- –†–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è ---
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class CodeInputStates(StatesGroup):
    waiting_for_analyze_code = State()
    waiting_for_format_code = State()

# --- –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω—ã –¥–ª—è FSM ---
cancel_button = KeyboardButton(text="/cancel")
cancel_kb = ReplyKeyboardMarkup(keyboard=[[cancel_button]], resize_keyboard=True, one_time_keyboard=True) # –î–æ–±–∞–≤–ª–µ–Ω one_time_keyboard

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def init_db(kernel_data: dict):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã 'analysis_history' –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î."""
    db = kernel_data.get("db")
    if db is None: logger.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"); return
    try:
        await db.execute('''CREATE TABLE IF NOT EXISTS analysis_history
                          (id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGER NOT NULL, code TEXT,
                           result TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await db.execute("CREATE INDEX IF NOT EXISTS idx_analysis_chat_id ON analysis_history (chat_id)")
        await db.commit()
        logger.info("üìä –¢–∞–±–ª–∏—Ü–∞ 'analysis_history' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except aiosqlite.Error as e: logger.error(f"‚ùå –û—à–∏–±–∫–∞ init_db: {e}", exc_info=True)

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ) ---
async def save_analysis(kernel_data: dict, chat_id: int, code: str, result: str):
    db = kernel_data.get("db")
    if db is None: logger.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"); return
    try:
        await db.execute("INSERT INTO analysis_history (chat_id, code, result) VALUES (?, ?, ?)", (chat_id, code, result))
        limit = 10
        await db.execute("DELETE FROM analysis_history WHERE chat_id = ? AND id NOT IN (SELECT id FROM analysis_history WHERE chat_id = ? ORDER BY timestamp DESC LIMIT ?)", (chat_id, chat_id, limit))
        await db.commit()
        logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è chat_id {chat_id}")
    except aiosqlite.Error as e: logger.error(f"‚ùå –û—à–∏–±–∫–∞ save_analysis: {e}", exc_info=True)

async def get_analysis_history(kernel_data: dict, chat_id: int) -> List[Tuple[Any, ...]]:
    db = kernel_data.get("db")
    if db is None: logger.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"); return []
    try:
        async with db.execute("SELECT code, result, timestamp FROM analysis_history WHERE chat_id = ? ORDER BY timestamp DESC LIMIT 5", (chat_id,)) as cursor:
            return await cursor.fetchall() # cursor.fetchall() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[tuple]
    except aiosqlite.Error as e: logger.error(f"‚ùå –û—à–∏–±–∫–∞ get_history: {e}", exc_info=True); return []

async def clear_analysis_history(kernel_data: dict, chat_id: int) -> int:
    db = kernel_data.get("db")
    if db is None: logger.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"); return 0
    try:
        async with db.execute("SELECT COUNT(*) FROM analysis_history WHERE chat_id = ?", (chat_id,)) as cursor:
            count_result = await cursor.fetchone(); count_to_delete = count_result[0] if count_result else 0
        if count_to_delete > 0:
            await db.execute("DELETE FROM analysis_history WHERE chat_id = ?", (chat_id,)); await db.commit()
            logger.info(f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è chat_id {chat_id}. –£–¥–∞–ª–µ–Ω–æ: {count_to_delete}")
            return count_to_delete
        else: logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è chat_id {chat_id} –ø—É—Å—Ç–∞."); return 0
    except aiosqlite.Error as e:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ clear_history –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        raise e # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def _preprocess_code(code: str | None) -> tuple[str | None, bool]:
    """–£–¥–∞–ª—è–µ—Ç ```, –∑–∞–º–µ–Ω—è–µ—Ç \u00A0 –Ω–∞ –ø—Ä–æ–±–µ–ª."""
    if not code: return None, False
    original_code = code
    processed_code = re.sub(r"^```(?:python)?\s*|\s*```$", "", code, flags=re.I).strip()
    processed_code = processed_code.replace('\u00A0', ' ')
    was_fixed = original_code != processed_code and '\u00A0' in original_code
    return processed_code if processed_code else None, was_fixed

def _format_history(history: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not history: return ""
    history_text = "\n\n‚è≥ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã:**\n"
    for idx, (hist_code, _, timestamp_str) in enumerate(history, 1):
         try: dt_obj = datetime.fromisoformat(timestamp_str); ts_formatted = dt_obj.strftime('%d.%m %H:%M')
         except: ts_formatted = timestamp_str # Fallback
         code_preview = hist_code.split('\n', 1)[0][:60] # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –ø—Ä–µ–≤—å—é
         history_text += f"`{idx}`. `{code_preview}...` ({ts_formatted})\n"
    return history_text

async def _reply_with_fallback(message: types.Message, text: str, **kwargs):
     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, –ø—ã—Ç–∞—è—Å—å —Å Markdown, –ø—Ä–∏ –æ—à–∏–±–∫–µ - –±–µ–∑."""
     try:
         await message.reply(text, parse_mode="Markdown", **kwargs)
     except TelegramBadRequest as e:
         if "can't parse entities" in str(e):
             logger.warning(f"–û—à–∏–±–∫–∞ Markdown: {e}. –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
             # –£–±–∏—Ä–∞–µ–º Markdown —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
             safe_text = re.sub(r"[`*_~]", "", text) # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞
             await message.reply(safe_text, parse_mode=None, **kwargs)
         else:
             logger.error(f"–û—à–∏–±–∫–∞ Telegram BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
             await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e.message}", **kwargs) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¢–ì
     except Exception as e:
         logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
         await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.", **kwargs)


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–¥—É–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è) ---
def check_syntax(code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python."""
    try: ast.parse(code); return True, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚úÖ"
    except SyntaxError as e:
        error_line = e.text.strip() if e.text else "[—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞]"
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: `{e.msg}` ‚ùå\n–°—Ç—Ä–æ–∫–∞: {e.lineno}, –ü–æ–∑.: {e.offset}\n–ö–æ–¥: `{error_line}`"

def analyze_code(code):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Python."""
    is_valid, syntax_result = check_syntax(code)
    recommendations = []
    if is_valid:
        if ".format(" in code and "f'" not in code and 'f"' not in code: recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ f-—Å—Ç—Ä–æ–∫–∏ (f'...') –≤–º–µ—Å—Ç–æ `.format()`.")
        if re.search(r"print\s+\(", code): recommendations.append("–ü—Ä–æ–±–µ–ª `print (` –Ω–µ –ø–æ PEP 8.")
        lines = code.splitlines(); has_tabs = any("\t" in l for l in lines); has_spaces = any(l.startswith(" ") for l in lines)
        if has_tabs and has_spaces: recommendations.append("–°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∞–±—ã/–ø—Ä–æ–±–µ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã.")
        elif has_tabs: recommendations.append("–¢–∞–±—ã –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤ (PEP 8 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã).")

    result = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n**–°–∏–Ω—Ç–∞–∫—Å–∏—Å:** {syntax_result}\n\n"
    if recommendations: result += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n" + "\n".join([f"‚Ä¢ {rec}" for rec in recommendations])
    elif is_valid: result += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø–ª–æ—Ö–æ! üëç"
    else: result += "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å."
    return result

def format_code(code):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ black."""
    if not BLACK_AVAILABLE: logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ black."); return False, "‚ùå `black` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    try:
        mode = black.FileMode(line_length=88); formatted = black.format_str(code, mode=mode)
        return True, (formatted, code == formatted)
    except black.NothingChanged: return True, (code, True)
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ black: {e}", exc_info=True); return False, f"‚ùå –û—à–∏–±–∫–∞: `{str(e)}`"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel (–¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è) ---
@router.message(Command("cancel"), StateFilter(CodeInputStates))
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /analyze ---
@router.message(Command("analyze"))
async def analyze_start(message: types.Message, command: CommandObject, state: FSMContext, kernel_data: dict):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    initial_code, _ = _preprocess_code(command.args)

    if initial_code:
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {message.from_user.id}")
        await state.clear()
        analysis_result = analyze_code(initial_code)
        await save_analysis(kernel_data, message.chat.id, initial_code, analysis_result)
        history = await get_analysis_history(kernel_data, message.chat.id)
        history_text = _format_history(history) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä
        response_text = f"{analysis_result}{history_text}"
        await _reply_with_fallback(message, response_text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        logger.info(f"üîç –ö–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.from_user.id}")
    else:
        await message.answer("üêç –û—Ç–ø—Ä–∞–≤—å—Ç–µ Python –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=cancel_kb)
        await state.set_state(CodeInputStates.waiting_for_analyze_code)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_analyze_code —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {message.from_user.id}")

@router.message(CodeInputStates.waiting_for_analyze_code, F.text)
async def analyze_process_code(message: types.Message, state: FSMContext, kernel_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç {message.from_user.id}")
    processed_code, fixed = _preprocess_code(message.text)

    if not processed_code:
        await message.reply("–ö–æ–¥ –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.", reply_markup=cancel_kb); return

    if fixed: await message.reply("‚ÑπÔ∏è *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.*", parse_mode="Markdown")

    analysis_result = analyze_code(processed_code)
    await save_analysis(kernel_data, message.chat.id, processed_code, analysis_result)
    history = await get_analysis_history(kernel_data, message.chat.id)
    history_text = _format_history(history) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä
    response_text = f"{analysis_result}{history_text}"

    await _reply_with_fallback(message, response_text, reply_markup=ReplyKeyboardRemove()) # –•–µ–ª–ø–µ—Ä –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É

    await state.clear(); logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.")

@router.message(CodeInputStates.waiting_for_analyze_code)
async def analyze_wrong_content(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–æ–¥–æ–º –∏–ª–∏ /cancel.", reply_markup=cancel_kb)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /format ---
@router.message(Command("format"))
async def format_start(message: types.Message, command: CommandObject, state: FSMContext, kernel_data: dict):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    if not BLACK_AVAILABLE: await message.reply("‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (`black`) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", parse_mode='Markdown'); return

    initial_code, _ = _preprocess_code(command.args)

    if initial_code:
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {message.from_user.id}")
        await state.clear()
        success, format_result = format_code(initial_code)
        if success:
            formatted_code, no_changes = format_result
            if no_changes: response_text = "‚úÖ **–ö–æ–¥ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω!** üëç"
            else: response_text = f"üñåÔ∏è **–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:**\n```python\n{formatted_code}\n```"
        else: response_text = format_result
        await _reply_with_fallback(message, response_text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä
        logger.info(f"üñåÔ∏è –ö–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è {message.from_user.id}")
    else:
        await message.answer("üñåÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ Python –∫–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ò–ª–∏ /cancel.", reply_markup=cancel_kb)
        await state.set_state(CodeInputStates.waiting_for_format_code)
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_format_code —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {message.from_user.id}")

@router.message(CodeInputStates.waiting_for_format_code, F.text)
async def format_process_code(message: types.Message, state: FSMContext, kernel_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç {message.from_user.id}")
    processed_code, fixed = _preprocess_code(message.text)

    if not processed_code:
        await message.reply("–ö–æ–¥ –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.", reply_markup=cancel_kb); return
    if fixed: await message.reply("‚ÑπÔ∏è *–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.*", parse_mode="Markdown")

    success, format_result = format_code(processed_code)
    if success:
        formatted_code, no_changes = format_result
        if no_changes: response_text = "‚úÖ **–ö–æ–¥ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω!** üëç"
        else: response_text = f"üñåÔ∏è **–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:**\n```python\n{formatted_code}\n```"
    else: response_text = format_result

    await _reply_with_fallback(message, response_text, reply_markup=ReplyKeyboardRemove()) # –•–µ–ª–ø–µ—Ä –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    await state.clear(); logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è {message.from_user.id} –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

@router.message(CodeInputStates.waiting_for_format_code)
async def format_wrong_content(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–æ–¥–æ–º –∏–ª–∏ /cancel.", reply_markup=cancel_kb)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_analysis (–∞–¥–º–∏–Ω—Å–∫–∞—è) ---
@router.message(Command("clear_analysis"))
async def clear_analysis_command(message: types.Message, command: CommandObject, kernel_data: dict):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ (–∞–¥–º–∏–Ω)."""
    if message.from_user.id not in kernel_data.get("admin_ids", []):
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!"); logger.info(f"‚õî –î–æ—Å—Ç—É–ø /clear –∑–∞–ø—Ä–µ—â—ë–Ω {message.from_user.id}"); return

    target_chat_id_str = command.args.strip() if command.args else None
    target_chat_id = None
    if target_chat_id_str:
        try: target_chat_id = int(target_chat_id_str)
        except ValueError: await message.reply("üìù ID —á–∞—Ç–∞ - —á–∏—Å–ª–æ! `/clear [ID]`", parse_mode="Markdown"); return
    else: target_chat_id = message.chat.id; logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {target_chat_id}")

    try:
        deleted_count = await clear_analysis_history(kernel_data, target_chat_id)
        if deleted_count > 0: await message.reply(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: `{deleted_count}` –¥–ª—è `{target_chat_id}`.", parse_mode="Markdown")
        else: await message.reply(f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è `{target_chat_id}` –ø—É—Å—Ç–∞.", parse_mode="Markdown")
    except Exception as e: await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: `{str(e)}`", parse_mode="Markdown")

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–¥—É–ª—è ---
def setup(kernel_data: dict):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è CodeAnalyzer."""
    base_dir = kernel_data.get("base_dir", ".")
    log_dir = os.path.join(base_dir, "data"); os.makedirs(log_dir, exist_ok=True)
    module_log_path = os.path.join(log_dir, "code_analyzer.log")
    try:
        log_handler = RotatingFileHandler(module_log_path, maxBytes=5*1024*1024, backupCount=3, encoding="utf-8")
        log_handler.setLevel(logging.INFO); log_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"); log_handler.setFormatter(log_formatter)
        logger.addHandler(log_handler); logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–æ–≥-—Ñ–∞–π–ª: {module_log_path}")
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä: {e}")

    dp = kernel_data.get("dp")
    if not dp: logger.critical("‚ùå –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return

    asyncio.create_task(init_db(kernel_data), name="code_analyzer_db_init")
    dp.include_router(router)
    logger.info("üõ† –ú–æ–¥—É–ª—å CodeAnalyzer –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

def get_commands() -> list[dict]:
    """–ö–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è."""
    return [
        {"command": "analyze", "description": "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Python", "admin": False, "icon": "üîç"},
        {"command": "format", "description": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ Python", "admin": False, "icon": "üñåÔ∏è"},
        {"command": "clear_analysis", "description": "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞", "admin": True, "icon": "üóëÔ∏è"}
    ]

async def on_startup(bot: Bot, data: dict):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    logger.info("üöÄ –ú–æ–¥—É–ª—å CodeAnalyzer –∑–∞–ø—É—â–µ–Ω.")
    if not BLACK_AVAILABLE:
        admin_ids = data.get("admin_ids", [])
        tasks = [bot.send_message(aid, "‚ö†Ô∏è `black` –Ω–µ –Ω–∞–π–¥–µ–Ω. `/format` –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.") for aid in admin_ids]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        for aid, res in zip(admin_ids, results):
            if isinstance(res, Exception): logger.warning(f"–ù–µ —É–≤–µ–¥–æ–º–∏–ª {aid} –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ black: {res}")
        logger.warning("‚ö†Ô∏è black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. /format –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def on_shutdown(bot: Bot, data: dict):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
    logger.info("üì¥ –ú–æ–¥—É–ª—å CodeAnalyzer –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")