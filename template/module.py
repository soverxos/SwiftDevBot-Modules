"""
–®–∞–±–ª–æ–Ω –º–æ–¥—É–ª—è –¥–ª—è SwiftDevBot
–≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—é–±–æ–≥–æ –º–æ–¥—É–ª—è. –û–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥–∏–±–∫–∏–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π.
–°–ª–µ–¥—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã!
"""

import logging
import asyncio
from typing import Optional, Dict, Any, List
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
# –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è.
logger = logging.getLogger(f"modules.{__name__}")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–¥—É–ª—è ---
# MODULE_NAME ‚Äî —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è –º–æ–¥—É–ª—è (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π).
# DISPLAY_NAME ‚Äî –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ Telegram.
# VERSION ‚Äî –≤–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
MODULE_NAME = "template_module"
DISPLAY_NAME = "–®–∞–±–ª–æ–Ω–Ω—ã–π –ú–æ–¥—É–ª—å"
VERSION = "1.0.0"
MODULE_ICON = "üìü"  # –ò–∫–æ–Ω–∫–∞ –º–æ–¥—É–ª—è –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
kernel_data = None  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ —è–¥—Ä–∞ –±–æ—Ç–∞ (–±–æ—Ç, –∫–æ–Ω—Ñ–∏–≥ –∏ —Ç.–¥.)

# --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å) ---
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤. –î–æ–±–∞–≤—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞!
LANGUAGES = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {name} v{version}!",
        "info": "‚ÑπÔ∏è –≠—Ç–æ {name} ‚Äî –ø—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è.",
        "action": "‚öôÔ∏è {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ...",
        "settings": "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {name}",
        "disabled": "‚õî {name} –æ—Ç–∫–ª—é—á—ë–Ω.",
        "no_access": "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {name}."
    },
    "en": {
        "welcome": "Welcome to {name} v{version}!",
        "info": "‚ÑπÔ∏è This is {name} ‚Äî a sample module.",
        "action": "‚öôÔ∏è {name} is performing an action...",
        "settings": "üîß {name} settings",
        "disabled": "‚õî {name} is disabled.",
        "no_access": "‚õî You don‚Äôt have access to {name}."
    }
}

# --- –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ---
# –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏—Ö –∫–∞–∂–¥—ã–π —Ä–∞–∑.
CACHE = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –≤ –∫–∞–∫–æ–º "—Ä–µ–∂–∏–º–µ" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
class ModuleStates(StatesGroup):
    main = State()      # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    settings = State()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è

# --- –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_text(key: str, lang: str = "ru") -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–º–µ–Ω–∏ –∏ –≤–µ—Ä—Å–∏–∏."""
    return LANGUAGES.get(lang, LANGUAGES["ru"])[key].format(name=DISPLAY_NAME, version=VERSION)

def get_main_menu_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–¥—É–ª—è."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚ÑπÔ∏è –û {DISPLAY_NAME}", callback_data="info")],
        [InlineKeyboardButton(text="‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ", callback_data="action")],
        [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])

def get_settings_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

def is_module_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á—ë–Ω –ª–∏ –º–æ–¥—É–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    return kernel_data["config"]["modules"].get(MODULE_NAME, False)

def check_permissions(user_id: int, admin_only: bool = False) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø."""
    if admin_only:
        return user_id in kernel_data.get("admin_ids", [])
    return True  # –ï—Å–ª–∏ admin_only=False, –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å —É –≤—Å–µ—Ö

async def update_stats(action: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    db = kernel_data.get("db")
    if db:
        await db.execute(
            "INSERT INTO module_stats (module, action, uses) VALUES (?, ?, 1) "
            "ON CONFLICT(module, action) DO UPDATE SET uses=uses+1",
            (MODULE_NAME, action)
        )
        await db.commit()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def module_command(message: types.Message, state: FSMContext, kernel_data: Dict[str, Any]) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–¥—É–ª—è. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç /template_module.
    –ü—Ä–∏–º–µ—Ä: /template_module
    """
    if not is_module_enabled():
        logger.info(f"‚õî –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –æ—Ç–∫–ª—é—á—ë–Ω")
        await message.answer(get_text("disabled"))
        return
    
    if not check_permissions(message.from_user.id, admin_only=False):
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ /{MODULE_NAME} –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {message.from_user.id}")
        await message.answer(get_text("no_access"))
        return
    
    logger.info(f"üìå –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /{MODULE_NAME} –¥–ª—è {message.from_user.id}")
    await update_stats("command_used")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        f"{MODULE_ICON} {get_text('welcome')}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_kb()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(ModuleStates.main)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
async def process_callback(callback: types.CallbackQuery, state: FSMContext, kernel_data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.
    –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–û –º–æ–¥—É–ª–µ" -> –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –∫–æ–¥.
    """
    if not is_module_enabled():
        logger.info(f"‚õî –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –æ—Ç–∫–ª—é—á—ë–Ω")
        await callback.answer(get_text("disabled"), show_alert=True)
        return
    
    if not check_permissions(callback.from_user.id, admin_only=False):
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–±—ç–∫—É {callback.data} –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {callback.from_user.id}")
        await callback.answer(get_text("no_access"), show_alert=True)
        return
    
    data = callback.data
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞: {data} –æ—Ç {callback.from_user.id}")
    await update_stats(f"callback_{data}")
    
    if data == "info":
        await callback.message.edit_text(
            f"{MODULE_ICON} {get_text('info')}",
            reply_markup=get_main_menu_kb()
        )
    elif data == "action":
        await callback.message.edit_text(
            f"{MODULE_ICON} {get_text('action')}",
            reply_markup=get_main_menu_kb()
        )
    elif data == "settings":
        await callback.message.edit_text(
            f"{MODULE_ICON} {get_text('settings')}\n(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            reply_markup=get_settings_kb()
        )
        await state.set_state(ModuleStates.settings)
    elif data == "back_to_main":
        await callback.message.edit_text(
            f"{MODULE_ICON} {get_text('welcome')}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_kb()
        )
        await state.set_state(ModuleStates.main)
    else:
        await callback.answer(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}", show_alert=True)
    
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π ---
async def on_message(message: types.Message, kernel_data: Dict[str, Any]) -> None:
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã). –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–¥—É–ª–µ–π –≤—Ä–æ–¥–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–ø—Ä–∏–≤–µ—Ç" -> –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç "–ü—Ä–∏–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ!"
    """
    if not is_module_enabled():
        return
    logger.info(f"üì© {DISPLAY_NAME} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    # –ü—Ä–∏–º–µ—Ä: —ç—Ö–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # await message.reply(f"{MODULE_ICON} –¢—ã —Å–∫–∞–∑–∞–ª: {message.text}")

# --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —è–¥—Ä–æ–º ---
def register_module(dp: Dispatcher, data: Dict[str, Any]) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞"""
    global kernel_data
    kernel_data = data
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã - –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    dp.message.register(module_command, Command(commands=[MODULE_NAME]))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–±—ç–∫–æ–≤ - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
    # –¢–æ–ª—å–∫–æ –∫–æ–ª–±—ç–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é
    from aiogram.filters import Text
    module_callbacks = ["info", "action", "settings", "back_to_main"]
    dp.callback_query.register(process_callback, Text(text=module_callbacks))
    
    # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    from aiogram.filters import ChatTypeFilter
    dp.message.register(on_message, ~Command(), ChatTypeFilter(types.ChatType.PRIVATE))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –±–æ—Ç–∞
    command_registry = kernel_data["command_registry"]
    command_registry.register_command(
        command=MODULE_NAME,
        description=f"–ó–∞–ø—É—Å—Ç–∏—Ç—å {DISPLAY_NAME}",
        icon=MODULE_ICON,
        category="Utility",
        admin=False
    )
    logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è ---
async def install(data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥—É–ª—è.
    –ú–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤ config.json.
    """
    global kernel_data
    kernel_data = data
    logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return {
        "welcome_message": {
            "type": "string",
            "default": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {DISPLAY_NAME}!",
            "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è",
            "required": False
        },
        "mode": {
            "type": "choice",
            "options": ["simple", "advanced"],
            "default": "simple",
            "description": "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è"
        }
    }

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ---
async def on_shutdown(data: Dict[str, Any]) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞.
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—á–∏—Å—Ç–∫–∏.
    """
    logger.info(f"üõë –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    CACHE.clear()  # –û—á–∏—â–∞–µ–º –∫—ç—à

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ---
async def background_task() -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.
    –ü—Ä–∏–º–µ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.
    """
    while True:
        logger.info(f"üïí {DISPLAY_NAME} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
        # –ü—Ä–∏–º–µ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        # for admin_id in kernel_data["admin_ids"]:
        #     await kernel_data["bot"].send_message(admin_id, f"{MODULE_ICON} –Ø —Ä–∞–±–æ—Ç–∞—é!")
        await asyncio.sleep(60)

def register_background_tasks(data: Dict[str, Any]) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ —è–¥—Ä–µ."""
    data["background_tasks"][MODULE_NAME] = [background_task]
    logger.info(f"üïí –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {DISPLAY_NAME} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ ---
async def get_cached_data(key: str, fetch_func: callable) -> Any:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Ö.
    –ü—Ä–∏–º–µ—Ä: CACHE["user_count"] = await get_user_count()
    """
    if key not in CACHE:
        CACHE[key] = await fetch_func()
    return CACHE[key]