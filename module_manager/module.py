import logging
import json
import os
import aiohttp
import zipfile
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Union, Tuple

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.base_module import BaseModule

logger = logging.getLogger(__name__)

class ModuleManagerStates(StatesGroup):
    waiting_for_module_name = State()
    waiting_for_repo_name = State()
    waiting_for_repo_url = State()

class ModuleManagerModule(BaseModule):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏"""
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏"""
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è {self.name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.debug(f"–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ {self.name}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.router.message.register(self.cmd_repos, Command("repos"))
        self.router.message.register(self.cmd_modules, Command("modules"))
        self.router.message.register(self.cmd_install, Command("install"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.router.callback_query.register(
            self.handle_repo_callback, 
            F.data.startswith("repo:")
        )
        
        self.router.callback_query.register(
            self.handle_module_callback, 
            F.data.startswith("module:")
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.router.message.register(
            self.process_module_name, 
            ModuleManagerStates.waiting_for_module_name
        )
        self.router.message.register(
            self.process_repo_name, 
            ModuleManagerStates.waiting_for_repo_name
        )
        self.router.message.register(
            self.process_repo_url, 
            ModuleManagerStates.waiting_for_repo_url
        )
        
        # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
        self.core.dp.include_router(self.router)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        await self.register_command("repos", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –º–æ–¥—É–ª–µ–π", self.cmd_repos, is_admin=True)
        await self.register_command("modules", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", self.cmd_modules, is_admin=True)
        await self.register_command("install", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", self.cmd_install, is_admin=True)
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏
        await self.register_menu(
            menu_id="module_manager",
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏",
            items=[
                {"text": "üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏", "callback_data": "module:installed"},
                {"text": "üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", "callback_data": "module:available"},
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏", "callback_data": "module:update_all"},
                {"text": "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏", "callback_data": "repo:list"}
            ],
            admin_only=True
        )
        
        logger.info(f"–ú–æ–¥—É–ª—å {self.name} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
    async def cmd_repos(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /repos - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –º–æ–¥—É–ª–µ–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.debug(f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /repos –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        
        if message.from_user.id not in self.core.config.admin_ids:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
            
        logger.debug("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤")
        await self.show_repositories(message)
    
    async def show_repositories(self, message_or_callback):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        repos_config = await self._get_repositories_config()
        
        if not repos_config or not repos_config.get("repositories"):
            # –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", callback_data="repo:add")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
            
            text = "üì¶ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π</b>\n\n"
            text += "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –º–æ–¥—É–ª–µ–π.\n\n"
            text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."
            
            if is_callback:
                await message.edit_text(text, reply_markup=keyboard)
                await message_or_callback.answer()
            else:
                await message.answer(text, reply_markup=keyboard)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        repos = repos_config["repositories"]
        text = "üì¶ <b>–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π</b>\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        
        for idx, repo in enumerate(repos):
            status = "‚úÖ" if repo.get("enabled", True) else "‚ùå"
            name = repo.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status} {name}",
                    callback_data=f"repo:toggle_{idx}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {name}",
                    callback_data=f"repo:delete_{idx}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", callback_data="repo:add")],
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="repo:refresh")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        
        if is_callback:
            await message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
            await message_or_callback.answer()
        else:
            await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    
    async def handle_repo_callback(self, callback: CallbackQuery, state: FSMContext = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        action = callback.data.split(":")[1]
        
        if action == "list":
            await self.show_repositories(callback)
            
        elif action == "add":
            await self.add_repository_dialog(callback, state)
            
        elif action == "refresh":
            await self.refresh_repositories(callback)
            
        elif action.startswith("toggle_"):
            repo_idx = int(action.split("_")[1])
            await self.toggle_repository(callback, repo_idx)
            
        elif action.startswith("delete_"):
            repo_idx = int(action.split("_")[1])
            await self.delete_repository(callback, repo_idx)
            
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    async def add_repository_dialog(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        await callback.message.edit_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:"
        )
        await state.set_state(ModuleManagerStates.waiting_for_repo_name)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await state.update_data(return_callback=callback.data)
        await callback.answer()
    
    async def process_repo_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        await state.update_data(repo_name=message.text.strip())
        
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:\n\n"
            "–ü—Ä–∏–º–µ—Ä: https://github.com/username/repo\n"
            "–∏–ª–∏ file:///path/to/local/repo"
        )
        
        await state.set_state(ModuleManagerStates.waiting_for_repo_url)
    
    async def process_repo_url(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        repo_url = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        if not (repo_url.startswith("http://") or repo_url.startswith("https://") or repo_url.startswith("file://")):
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.\n\n"
                "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https:// –∏–ª–∏ file://\n\n"
                "–í–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–Ω–æ–≤–∞:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        repo_name = data.get("repo_name", "–ù–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        repos_config = await self._get_repositories_config()
        
        if not repos_config:
            repos_config = {"repositories": []}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º URL
        for repo in repos_config["repositories"]:
            if repo["url"] == repo_url:
                await message.answer(
                    f"‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å URL {repo_url} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                    f"–ò–º—è: {repo['name']}"
                )
                await state.clear()
                await self.show_repositories(message)
                return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        repos_config["repositories"].append({
            "name": repo_name,
            "url": repo_url,
            "enabled": True,
            "priority": 100,  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "added_at": datetime.now().isoformat()
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await self._save_repositories_config(repos_config)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        await state.clear()
        
        await message.answer(
            f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π <b>{repo_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"URL: {repo_url}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        await self.show_repositories(message)
    
    async def refresh_repositories(self, callback: CallbackQuery):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö"""
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
        # ... (–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤)
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        await self.show_repositories(callback)
    
    async def toggle_repository(self, callback: CallbackQuery, repo_idx: int):
        """–í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        repos_config = await self._get_repositories_config()
        
        if not repos_config or not repos_config.get("repositories") or repo_idx >= len(repos_config["repositories"]):
            await callback.answer("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repos_config["repositories"][repo_idx]["enabled"] = not repos_config["repositories"][repo_idx].get("enabled", True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await self._save_repositories_config(repos_config)
        
        status = "–≤–∫–ª—é—á–µ–Ω" if repos_config["repositories"][repo_idx]["enabled"] else "–æ—Ç–∫–ª—é—á–µ–Ω"
        await callback.answer(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        await self.show_repositories(callback)
    
    async def delete_repository(self, callback: CallbackQuery, repo_idx: int):
        """–£–¥–∞–ª—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        repos_config = await self._get_repositories_config()
        
        if not repos_config or not repos_config.get("repositories") or repo_idx >= len(repos_config["repositories"]):
            await callback.answer("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        repo_name = repos_config["repositories"][repo_idx].get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        del repos_config["repositories"][repo_idx]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await self._save_repositories_config(repos_config)
        
        await callback.answer(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name} —É–¥–∞–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        await self.show_repositories(callback)
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª—è–º–∏
    async def cmd_modules(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /modules - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        if message.from_user.id not in self.core.config.admin_ids:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
            
        await self.show_available_modules(message)
    
    async def show_available_modules(self, message_or_callback):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        is_callback = isinstance(message_or_callback, CallbackQuery)
        message = message_or_callback.message if is_callback else message_or_callback
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        if is_callback:
            await message.edit_text(
                "üîç <b>–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            await message_or_callback.answer("–ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π...")
        else:
            loading_msg = await message.answer(
                "üîç <b>–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        modules = await self._get_available_modules()
        
        if not modules:
            text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏</b>\n\n"
            text += "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.\n\n"
            text += "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏", callback_data="repo:list")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
            
            if is_callback:
                await message.edit_text(text, reply_markup=keyboard)
            else:
                await loading_msg.delete()
                await message.answer(text, reply_markup=keyboard)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
        text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏</b>\n\n"
        
        for idx, module in enumerate(modules, 1):
            text += f"{idx}. <b>{module.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}</b> v{module.get('version', '1.0.0')}\n"
            text += f"   {module.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            
            if 'author' in module:
                text += f"   –ê–≤—Ç–æ—Ä: {module.get('author')}\n"
                
            repo_name = module.get('repository_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
            text += f"   –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å", callback_data="module:install")],
            [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏", callback_data="repo:list")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await loading_msg.delete()
            await message.answer(text, reply_markup=keyboard)
    
    async def cmd_install(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /install - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if message.from_user.id not in self.core.config.admin_ids:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        await message.answer(
            "üíæ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
        )
        
        await state.set_state(ModuleManagerStates.waiting_for_module_name)
    
    async def process_module_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        module_name = message.text.strip()
        
        # –ò—â–µ–º –º–æ–¥—É–ª—å –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö
        modules = await self._get_available_modules()
        target_module = None
        
        for module in modules:
            if module.get('name', '') == module_name:
                target_module = module
                break
        
        if not target_module:
            await message.answer(
                f"‚ö†Ô∏è –ú–æ–¥—É–ª—å <b>{module_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /modules –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."
            )
            await state.clear()
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        installing_msg = await message.answer(
            f"‚è≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è {module_name}...</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª—å
        success, error_msg = await self._install_module(target_module)
        
        await installing_msg.delete()
        
        if success:
            await message.answer(
                f"‚úÖ –ú–æ–¥—É–ª—å <b>{module_name}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {target_module.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"–í–µ—Ä—Å–∏—è: {target_module.get('version', '1.0.0')}\n\n"
                f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reload"
            )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥—É–ª—è <b>{module_name}</b>:\n\n"
                f"{error_msg}"
            )
        
        await state.clear()
    
    async def handle_module_callback(self, callback: CallbackQuery, state: FSMContext = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π"""
        parts = callback.data.split(":")
        action = parts[1]
        
        if action == "available":
            await self.show_available_modules(callback)
            
        elif action == "installed":
            await self.show_installed_modules(callback)
            
        elif action == "details" and len(parts) > 2:
            module_name = parts[2]
            await self.show_module_details(callback, module_name)
            
        elif action == "toggle" and len(parts) > 2:
            module_name = parts[2]
            await self.toggle_module_state(callback, module_name)
            
        elif action == "settings" and len(parts) > 2:
            module_name = parts[2]
            await self.show_module_settings(callback, module_name)
            
        elif action == "confirm_delete" and len(parts) > 2:
            module_name = parts[2]
            await self.confirm_delete_module(callback, module_name)
            
        elif action == "delete" and len(parts) > 2:
            module_name = parts[2]
            await self.delete_module(callback, module_name)
            
        elif action == "install":
            await callback.message.edit_text(
                "üíæ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:"
            )
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            modules = await self._get_available_modules()
            
            keyboard = []
            for module in modules:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{module.get('name')} v{module.get('version', '1.0.0')}",
                        callback_data=f"module:install:{module.get('name')}"
                    )
                ])
                
            keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="module:available")])
            
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
            await callback.answer()
            
        elif action == "update_all":
            await self.update_all_modules(callback)
            
        elif action.startswith("install:") and len(parts) > 2:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            module_name = parts[2]
            await self.install_module_callback(callback, module_name)
            
        elif action.startswith("update:") and len(parts) > 2:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            module_name = parts[2]
            await self.update_module(callback, module_name)
            
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    async def show_installed_modules(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        await callback.message.edit_text(
            "üì¶ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        installed_modules = await self._get_installed_modules()
        
        if not installed_modules:
            text = "üì¶ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏</b>\n\n"
            text += "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", callback_data="module:available")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
        text = "üì¶ <b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥—É–ª–µ–π
        keyboard = []
        
        for module in installed_modules:
            module_name = module.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{module_name} v{module.get('version', '1.0.0')}",
                    callback_data=f"module:details:{module_name}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="module:update_all")],
            [InlineKeyboardButton(text="üîç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", callback_data="module:available")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
    
    async def show_module_details(self, callback: CallbackQuery, module_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
        modules = await self._get_installed_modules()
        module_info = None
        
        for module in modules:
            if module.get('name', '') == module_name:
                module_info = module
                break
        
        if not module_info:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è (–≤–∫–ª—é—á–µ–Ω/–æ—Ç–∫–ª—é—á–µ–Ω)
        module_enabled = module_info.get('enabled', True)
        status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if module_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        toggle_text = "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å" if module_enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª–µ
        text = f"üì¶ <b>–ú–æ–¥—É–ª—å: {module_name}</b>\n\n"
        text += f"<b>–í–µ—Ä—Å–∏—è:</b> {module_info.get('version', '1.0.0')}\n"
        text += f"<b>–ê–≤—Ç–æ—Ä:</b> {module_info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
        text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{module_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        
        # –ï—Å–ª–∏ —É –º–æ–¥—É–ª—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        commands = module_info.get('commands', [])
        if commands:
            text += "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            for cmd in commands:
                cmd_name = cmd.get('name', '')
                cmd_desc = cmd.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                text += f"/{cmd_name} - {cmd_desc}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –º–æ–¥—É–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=toggle_text,
                callback_data=f"module:toggle:{module_name}"
            )],
            [InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                callback_data=f"module:settings:{module_name}"
            )],
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"module:update:{module_name}"
            )],
            [InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"module:confirm_delete:{module_name}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π",
                callback_data="module:installed"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
    
    async def toggle_module_state(self, callback: CallbackQuery, module_name: str):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
        modules = await self._get_installed_modules()
        module_info = None
        module_path = None
        
        for module in modules:
            if module.get('name', '') == module_name:
                module_info = module
                module_path = module.get('path', '')
                break
        
        if not module_info or not module_path:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π)
        current_status = module_info.get('enabled', True)
        new_status = not current_status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º manifest.json –º–æ–¥—É–ª—è
        manifest_path = Path(module_path) / "manifest.json"
        
        try:
            with open(manifest_path, 'r', encoding='utf-8') as f:
                manifest_data = json.load(f)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            manifest_data['enabled'] = new_status
            
            with open(manifest_path, 'w', encoding='utf-8') as f:
                json.dump(manifest_data, f, indent=2, ensure_ascii=False)
            
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"–ú–æ–¥—É–ª—å {status_text}! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
            await self.show_module_details(callback, module_name)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", show_alert=True)
    
    async def show_module_settings(self, callback: CallbackQuery, module_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
        modules = await self._get_installed_modules()
        module_info = None
        module_path = None
        
        for module in modules:
            if module.get('name', '') == module_name:
                module_info = module
                module_path = module.get('path', '')
                break
        
        if not module_info or not module_path:
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        config_path = Path(module_path) / "config.json"
        
        if not config_path.exists():
            await callback.message.edit_text(
                f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è {module_name}</b>\n\n"
                f"–£ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é",
                        callback_data=f"module:details:{module_name}"
                    )]
                ])
            )
            await callback.answer()
            return
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è {module_name}</b>\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            for key, value in config_data.items():
                if isinstance(value, bool):
                    status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if value else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
                    text += f"<b>{key}</b>: {status}\n"
                else:
                    text += f"<b>{key}</b>: {value}\n"
            
            text += "\n<i>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</i>"
            
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é",
                        callback_data=f"module:details:{module_name}"
                    )]
                ])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è {module_name}: {e}")
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è: {e}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é",
                        callback_data=f"module:details:{module_name}"
                    )]
                ])
            )
        
        await callback.answer()
    
    async def confirm_delete_module(self, callback: CallbackQuery, module_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è"""
        await callback.message.edit_text(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å <b>{module_name}</b>?\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"module:delete:{module_name}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"module:details:{module_name}")
                ]
            ])
        )
        await callback.answer()
    
    async def delete_module(self, callback: CallbackQuery, module_name: str):
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å"""
        await callback.message.edit_text(
            f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è {module_name}...</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
        modules = await self._get_installed_modules()
        module_path = None
        
        for module in modules:
            if module.get('name', '') == module_name:
                module_path = module.get('path', '')
                break
        
        if not module_path:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            await callback.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥—É–ª—è
            shutil.rmtree(module_path)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            await callback.message.edit_text(
                f"‚úÖ <b>–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reload",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏", callback_data="admin:reload_all")],
                    [InlineKeyboardButton(text="üì¶ –ö —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π", callback_data="module:installed")]
                ])
            )
            success = True
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_name}</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="module:installed")]
                ])
            )
            success = False
        
        await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return success
    
    async def update_all_modules(self, callback: CallbackQuery):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"""
        await callback.message.edit_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
        # ... (–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π)
        
        # –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(
            "‚úÖ <b>–í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reload"
        )
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def _get_repositories_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        repos_path = Path("data/repositories.json")
        
        if not repos_path.exists():
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            return {
                "repositories": []
            }
        
        try:
            with open(repos_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {repos_path}")
            return {"repositories": []}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {e}")
            return {"repositories": []}
    
    async def _save_repositories_config(self, repos_config: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        repos_path = Path("data/repositories.json")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            repos_path.parent.mkdir(parents=True, exist_ok=True)
            
            with open(repos_path, 'w', encoding='utf-8') as f:
                json.dump(repos_config, f, indent=4, ensure_ascii=False)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {e}")
            return False
    
    async def _get_available_modules(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        repos_config = await self._get_repositories_config()
        repositories = repos_config.get("repositories", [])
        
        if not repositories:
            return []
        
        all_modules = []
        
        for repo in repositories:
            if not repo.get("enabled", True):
                continue
                
            repo_url = repo.get("url")
            
            if not repo_url:
                continue
                
            try:
                # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                modules = await self._fetch_modules_from_repository(repo)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
                for module in modules:
                    module["repository_name"] = repo.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
                    module["repository_url"] = repo_url
                
                all_modules.extend(modules)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo.get('name')}: {e}")
        
        return all_modules
    
    async def _fetch_modules_from_repository(self, repo: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        repo_url = repo.get("url")
        
        if not repo_url:
            return []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        if repo_url.startswith("file://"):
            local_path = repo_url[7:]  # –£–¥–∞–ª—è–µ–º 'file://'
            return await self._fetch_modules_from_local_repository(local_path)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ HTTP/HTTPS
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                index_url = f"{repo_url}/index.json"
                if not index_url.startswith("http"):
                    index_url = f"https://{index_url}"
                
                async with session.get(index_url) as response:
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo.get('name')}: HTTP {response.status}")
                        return []
                    
                    index_data = await response.json()
                    return index_data.get("modules", [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo.get('name')}: {e}")
            return []
    
    async def _fetch_modules_from_local_repository(self, local_path: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        index_path = Path(local_path) / "index.json"
        
        if not index_path.exists():
            logger.error(f"–ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {index_path}")
            return []
        
        try:
            with open(index_path, 'r', encoding='utf-8') as f:
                index_data = json.load(f)
                return index_data.get("modules", [])
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {index_path}")
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
            return []
    
    async def _get_installed_modules(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        modules_dir = Path("modules")
        
        if not modules_dir.exists():
            return []
        
        installed_modules = []
        
        for module_dir in modules_dir.iterdir():
            if not module_dir.is_dir() or module_dir.name.startswith('__'):
                continue
            
            manifest_path = module_dir / "manifest.json"
            
            if not manifest_path.exists():
                continue
            
            try:
                with open(manifest_path, 'r', encoding='utf-8') as f:
                    manifest = json.load(f)
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—é
                manifest["path"] = str(module_dir)
                installed_modules.append(manifest)
            except json.JSONDecodeError:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ {manifest_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ {module_dir.name}: {e}")
        
        return installed_modules
    
    async def _install_module(self, module: Dict[str, Any]) -> Tuple[bool, str]:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        
        Args:
            module: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        module_name = module.get('name')
        repo_url = module.get('repository_url')
        
        if not module_name:
            return False, "–ò–º—è –º–æ–¥—É–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        if not repo_url:
            return False, "URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –º–æ–¥—É–ª—å
        modules_dir = Path("modules")
        module_dir = modules_dir / module_name
        
        if module_dir.exists():
            return False, f"–ú–æ–¥—É–ª—å {module_name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥—É–ª—è
            module_dir.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –º–æ–¥—É–ª—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            if repo_url.startswith("file://"):
                # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                local_path = repo_url[7:]  # –£–¥–∞–ª—è–µ–º 'file://'
                module_src_dir = Path(local_path) / "modules" / module_name
                
                if not module_src_dir.exists():
                    return False, f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
                for item in module_src_dir.iterdir():
                    if item.is_dir():
                        shutil.copytree(item, module_dir / item.name)
                    else:
                        shutil.copy2(item, module_dir / item.name)
            else:
                # –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π - —Å–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                module_zip_url = f"{repo_url}/modules/{module_name}/{module_name}.zip"
                
                if not module_zip_url.startswith("http"):
                    module_zip_url = f"https://{module_zip_url}"
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞
                temp_dir = Path("data/temp")
                temp_dir.mkdir(parents=True, exist_ok=True)
                
                zip_path = temp_dir / f"{module_name}.zip"
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
                async with aiohttp.ClientSession() as session:
                    async with session.get(module_zip_url) as response:
                        if response.status != 200:
                            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è: HTTP {response.status}"
                        
                        with open(zip_path, 'wb') as f:
                            f.write(await response.read())
                
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(module_dir)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
                os.remove(zip_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
            if not (module_dir / "module.py").exists() or not (module_dir / "manifest.json").exists():
                shutil.rmtree(module_dir)
                return False, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"
            
            return True, ""
        
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥—É–ª—è
            if module_dir.exists():
                shutil.rmtree(module_dir)
                
            return False, str(e)
