# ./modules/youtube_downloader/module.py
import os
import json
import logging
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import yt_dlp

router = Router()
logger = logging.getLogger("youtube_downloader")

_kernel_data = None
DOWNLOAD_DIR = None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class YoutubeStates(StatesGroup):
    waiting_for_url = State()

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
DISPLAY_NAME = "YouTube Downloader üìπ"
DESCRIPTION = "–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å YouTube, Facebook –∏–ª–∏ Instagram."
GLOBAL_PARAMETERS = {
    "max_quality": {
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (360, 720, 1080)",
        "required": False,
        "default": "720"
    }
}
USER_PARAMETERS = {
    "default_format": {
        "description": "–§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (video/audio)",
        "required": False,
        "default": "video"
    },
    "default_quality": {
        "description": "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (360, 720, 1080)",
        "required": False,
        "default": "720"
    }
}

def setup(kernel_data):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."""
    global _kernel_data, DOWNLOAD_DIR
    _kernel_data = kernel_data
    dp = kernel_data["dp"]
    base_dir = kernel_data["base_dir"]
    dp.include_router(router)
    
    DOWNLOAD_DIR = os.path.join(base_dir, "data", "youtube_downloads")
    if not os.path.exists(DOWNLOAD_DIR):
        os.makedirs(DOWNLOAD_DIR)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: {DOWNLOAD_DIR}")
    
    db = kernel_data.get("db")
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ kernel_data['db']!")
        raise ValueError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    asyncio.create_task(init_db(db))
    init_config(base_dir)
    
    logger.info("–ú–æ–¥—É–ª—å youtube_downloader —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

async def init_db(db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    try:
        async with db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='youtube_config'") as cursor:
            if not await cursor.fetchone():
                await db.execute("""
                    CREATE TABLE youtube_config (
                        user_id INTEGER PRIMARY KEY,
                        default_format TEXT,
                        default_quality TEXT
                    )
                """)
                await db.commit()
                logger.info("–¢–∞–±–ª–∏—Ü–∞ youtube_config —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def init_config(base_dir):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è."""
    config_path = os.path.join(base_dir, "modules", "youtube_downloader", "config.json")
    try:
        if not os.path.exists(config_path):
            os.makedirs(os.path.dirname(config_path), exist_ok=True)
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump({"max_quality": GLOBAL_PARAMETERS["max_quality"]["default"]}, f, indent=4)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.json: {config_path}")
        else:
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {config_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise

def load_config(base_dir):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è."""
    config_path = os.path.join(base_dir, "modules", "youtube_downloader", "config.json")
    try:
        if os.path.exists(config_path):
            with open(config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        return {"max_quality": GLOBAL_PARAMETERS["max_quality"]["default"]}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {"max_quality": GLOBAL_PARAMETERS["max_quality"]["default"]}

async def get_user_config(db, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_user_config!")
        return {}
    try:
        async with db.execute("SELECT default_format, default_quality FROM youtube_config WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {"default_format": row[0], "default_quality": row[1]}
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}

async def set_user_config(db, user_id, config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ set_user_config!")
        return
    try:
        if config is None:
            await db.execute("DELETE FROM youtube_config WHERE user_id = ?", (user_id,))
        else:
            default_format = config.get("default_format", USER_PARAMETERS["default_format"]["default"])
            default_quality = config.get("default_quality", USER_PARAMETERS["default_quality"]["default"])
            await db.execute(
                "INSERT OR REPLACE INTO youtube_config (user_id, default_format, default_quality) VALUES (?, ?, ?)",
                (user_id, default_format, default_quality)
            )
        await db.commit()
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {config}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise

async def get_settings_menu(user_id, is_enabled, admin_ids, kernel_data):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è."""
    text = (f"üìã **{DISPLAY_NAME}** ({'üü¢ –í–∫–ª' if is_enabled else 'üî¥ –í—ã–∫–ª'})\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {DESCRIPTION}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n")
    
    keyboard = []
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id in admin_ids:
        global_config = load_config(kernel_data["base_dir"])
        for param, info in GLOBAL_PARAMETERS.items():
            value = global_config.get(param, info["default"])
            text += f"üîß {info['description']}: **{value}**\n"
        text += "\n"
        keyboard.append([types.InlineKeyboardButton(
            text="üîß –ò–∑–º–µ–Ω–∏—Ç—å max_quality",
            callback_data="set_global_youtube_downloader_max_quality"
        )])
        keyboard.append([types.InlineKeyboardButton(
            text=f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if is_enabled else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'}",
            callback_data="toggle_youtube_downloader"
        )])
        keyboard.append([types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
            callback_data="delete_module_youtube_downloader"
        )])

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_config = await get_user_config(kernel_data["db"], user_id)
    for param, info in USER_PARAMETERS.items():
        value = user_config.get(param, info["default"])
        text += f"üë§ {info['description']}: **{value}**\n"
    keyboard.append([types.InlineKeyboardButton(
        text="üé• –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç",
        callback_data="set_user_youtube_downloader_default_format"
    )])
    keyboard.append([types.InlineKeyboardButton(
        text="üìê –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ",
        callback_data="set_user_youtube_downloader_default_quality"
    )])
    if user_config:
        keyboard.append([types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="delete_config_youtube_downloader"
        )])
    
    keyboard.append([types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="list_modules"
    )])
    
    return text, keyboard

async def download_file(url: str, format_type: str, quality: str = None) -> tuple[str, str, str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å YouTube, Facebook –∏–ª–∏ Instagram."""
    ydl_opts = {
        "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s.%(ext)s"),
        "quiet": True,
        "noplaylist": True,
    }
    
    if format_type == "video":
        ydl_opts["format"] = f"bestvideo[height<={quality}][filesize<50M]+bestaudio/best[filesize<50M]"
        ydl_opts["merge_output_format"] = "mp4"
    elif format_type == "audio":
        ydl_opts["format"] = "bestaudio/best[filesize<50M]"
        ydl_opts["postprocessors"] = [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }]
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(info)
            if format_type == "audio":
                file_path = file_path.rsplit(".", 1)[0] + ".mp3"
            title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            thumbnail_url = info.get("thumbnail", "")
            return file_path, title, thumbnail_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")

@router.message(Command("yt"))
async def yt_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /yt."""
    if _kernel_data is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    
    db = _kernel_data.get("db")
    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    
    args = message.text.replace("/yt", "").strip()
    if args:
        await process_url(message, args, state)
    else:
        await message.answer("üìπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (YouTube, Facebook –∏–ª–∏ Instagram):")
        await state.set_state(YoutubeStates.waiting_for_url)

@router.message(YoutubeStates.waiting_for_url)
async def process_url_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    url = message.text.strip()
    if not url:
        await message.answer("üìπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:")
        return
    await process_url(message, url, state)

async def process_url(message: types.Message, url: str, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏ –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞."""
    user_config = await get_user_config(_kernel_data["db"], message.from_user.id)
    default_format = user_config.get("default_format", USER_PARAMETERS["default_format"]["default"])
    default_quality = user_config.get("default_quality", USER_PARAMETERS["default_quality"]["default"])
    
    global_config = load_config(_kernel_data["base_dir"])
    max_quality = global_config.get("max_quality", GLOBAL_PARAMETERS["max_quality"]["default"])
    
    keyboard = [
        [types.InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data=f"yt_format_video_{url}")],
        [types.InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ (MP3)", callback_data=f"yt_format_audio_{url}")],
        [types.InlineKeyboardButton(text=f"‚öôÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_format})", callback_data=f"yt_default_{url}")]
    ]
    await message.answer("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard))
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("yt_format_") or c.data.startswith("yt_default_") or c.data.startswith("yt_quality_"))
async def process_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–± Edison: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞."""
    data_parts = callback.data.split("_")
    action = data_parts[1]
    url = "_".join(data_parts[2:])
    user_id = callback.from_user.id
    
    user_config = await get_user_config(_kernel_data["db"], user_id)
    default_format = user_config.get("default_format", USER_PARAMETERS["default_format"]["default"])
    default_quality = user_config.get("default_quality", USER_PARAMETERS["default_quality"]["default"])
    global_config = load_config(_kernel_data["base_dir"])
    max_quality = global_config.get("max_quality", GLOBAL_PARAMETERS["max_quality"]["default"])
    
    if action == "default":
        format_type = default_format
        quality = default_quality if format_type == "video" else None
        if format_type == "video" and int(quality) > int(max_quality):
            quality = max_quality
        await callback.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ ({format_type}{' ' + quality + 'p' if quality else ''})...")
        await process_download(callback.message, url, format_type, quality)
    
    elif action == "video":
        keyboard = [
            [types.InlineKeyboardButton(text="360p", callback_data=f"yt_quality_360_{url}")],
            [types.InlineKeyboardButton(text="720p", callback_data=f"yt_quality_720_{url}")],
            [types.InlineKeyboardButton(text="1080p", callback_data=f"yt_quality_1080_{url}")]
        ]
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard))
    
    elif action == "audio":
        await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
        await process_download(callback.message, url, "audio", None)
    
    elif action == "quality":
        quality = data_parts[2]
        if int(quality) > int(max_quality):
            await callback.message.edit_text(f"‚ùå –ö–∞—á–µ—Å—Ç–≤–æ {quality}p –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ ({max_quality}p).")
            return
        await callback.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ ({quality}p)...")
        await process_download(callback.message, url, "video", quality)

async def process_download(message: types.Message, url: str, format_type: str, quality: str = None):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞."""
    try:
        file_path, title, _ = await download_file(url, format_type, quality)
        file_size = os.path.getsize(file_path) / (1024 * 1024)
        
        if file_size > 50:
            await message.reply(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size:.2f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º: 50 –ú–ë.")
            os.remove(file_path)
            return
        
        if format_type == "video":
            file = types.FSInputFile(file_path, filename=f"{title}.mp4")
            await message.reply_video(
                video=file,
                caption=f"üé• {title} ({quality}p)",
                supports_streaming=True
            )
        elif format_type == "audio":
            file = types.FSInputFile(file_path, filename=f"{title}.mp3")
            await message.reply_audio(
                audio=file,
                title=title,
                caption="üéµ –°–∫–∞—á–∞–Ω–æ"
            )
        
        os.remove(file_path)
        logger.info(f"–§–∞–π–ª {title} ({format_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")

def get_commands():
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è."""
    return [
        {"command": types.BotCommand(command="/yt", description="üìπ –°–∫–∞—á–∞—Ç—å —Å YouTube, Facebook –∏–ª–∏ Instagram"), "access": "all"}
    ]

async def on_startup(kernel_data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è."""
    logger.info("–ú–æ–¥—É–ª—å youtube_downloader –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(kernel_data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
    logger.info("–ú–æ–¥—É–ª—å youtube_downloader –∑–∞–≤–µ—Ä—à—ë–Ω")
