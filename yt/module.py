# ./modules/youtube_downloader/module.py
import os
import asyncio
import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import yt_dlp

router = Router()
logger = logging.getLogger("youtube_downloader")

DOWNLOAD_DIR = None
kernel_data = None

def setup(data):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è"""
    global DOWNLOAD_DIR, kernel_data
    kernel_data = data
    dp = data["dp"]
    base_dir = data["base_dir"]
    dp.include_router(router)
    
    DOWNLOAD_DIR = os.path.join(base_dir, "data", "youtube_downloads")
    if not os.path.exists(DOWNLOAD_DIR):
        os.makedirs(DOWNLOAD_DIR)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫: {DOWNLOAD_DIR}")
    
    router.download_dir = DOWNLOAD_DIR
    router.user_states = {}
    logger.info("–ú–æ–¥—É–ª—å youtube_downloader –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def get_module_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ"""
    return {
        "name": "youtube_downloader",
        "display_name": "YouTube Downloader",
        "description": "–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å YouTube, Facebook –∏–ª–∏ Instagram",
        "global_params": {
            "max_quality": {
                "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (360, 720, 1080)",
                "default": "720"
            }
        },
        "user_params": {
            "default_format": {
                "description": "–§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (video/audio)",
                "default": "video"
            },
            "default_quality": {
                "description": "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (360, 720, 1080)",
                "default": "720"
            }
        }
    }

def get_commands():
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è"""
    return [
        {"command": types.BotCommand(command="/yt", description="üìπ –°–∫–∞—á–∞—Ç—å —Å YouTube, Facebook –∏–ª–∏ Instagram"), "access": "all"}
    ]

async def get_settings_menu(user_id: int, is_enabled: bool, admin_ids: list, data: dict):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è"""
    module_info = get_module_info()
    display_name = module_info["display_name"]
    text = f"üìπ {display_name} ({'ONüü¢' if is_enabled else 'OFFüî¥'})"
    keyboard = []

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id in admin_ids:
        global_config_path = os.path.join(data["base_dir"], "modules", "youtube_downloader", "config.json")
        global_config = {}
        if os.path.exists(global_config_path):
            with open(global_config_path, "r", encoding="utf-8") as f:
                import json
                global_config = json.load(f)
        max_quality = global_config.get("max_quality", module_info["global_params"]["max_quality"]["default"])
        text += f"\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {max_quality}p"
        keyboard.append([
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å. –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="set_global_youtube_downloader_max_quality")
        ])
        if is_enabled:
            keyboard.append([
                InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="toggle_youtube_downloader")
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å", callback_data="toggle_youtube_downloader")
            ])
        keyboard.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å", callback_data="delete_module_youtube_downloader")
        ])

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_config = await get_user_config(data["db"], user_id) or {}
    default_format = user_config.get("default_format", module_info["user_params"]["default_format"]["default"])
    default_quality = user_config.get("default_quality", module_info["user_params"]["default_quality"]["default"])
    text += f"\n- –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_format}"
    text += f"\n- –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_quality}p"
    keyboard.append([
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç", callback_data="set_user_youtube_downloader_default_format")
    ])
    keyboard.append([
        InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="set_user_youtube_downloader_default_quality")
    ])
    if user_config:
        keyboard.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="delete_config_youtube_downloader")
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="list_modules")
    ])
    
    return text, keyboard

async def get_user_config(db, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return None
    async with db.execute("SELECT config FROM user_configs WHERE module_name = ? AND user_id = ?", 
                         ("youtube_downloader", user_id)) as cursor:
        row = await cursor.fetchone()
        if row:
            import json
            return json.loads(row[0])
    return None

async def set_user_config(db, user_id, config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    import json
    config_json = json.dumps(config) if config is not None else None
    await db.execute(
        "INSERT OR REPLACE INTO user_configs (module_name, user_id, config) VALUES (?, ?, ?)",
        ("youtube_downloader", user_id, config_json)
    )
    await db.commit()

async def download_file(url: str, download_dir: str, format_type: str, quality: str = None) -> tuple[str, str, str]:
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å YouTube, Facebook –∏–ª–∏ Instagram"""
    ydl_opts = {
        "outtmpl": os.path.join(download_dir, "%(title)s.%(ext)s"),
        "quiet": True,
        "noplaylist": True,  # –°–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –∞ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç
    }
    
    if format_type == "video":
        ydl_opts["format"] = f"bestvideo[height<={quality}][filesize<50M]+bestaudio/best[filesize<50M]"
        ydl_opts["merge_output_format"] = "mp4"
    elif format_type == "audio":
        ydl_opts["format"] = "bestaudio/best[filesize<50M]"
        ydl_opts["postprocessors"] = [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }]
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(info)
            if format_type == "audio":
                file_path = file_path.rsplit(".", 1)[0] + ".mp3"
            title = info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            thumbnail_url = info.get("thumbnail", "")
            return file_path, title, thumbnail_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")

@router.message(Command("yt"))
async def download_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /yt"""
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ: /yt <URL> (YouTube, Facebook –∏–ª–∏ Instagram)")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–ª URL –¥–ª—è /yt")
        return
    
    url = args[1]
    router.user_states[message.from_user.id] = {"url": url}
    
    user_config = await get_user_config(kernel_data["db"], message.from_user.id) or {}
    default_format = user_config.get("default_format", "video")
    
    if default_format == "video":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="format_video")],
            [InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ (MP3)", callback_data="format_audio")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–∏–¥–µ–æ)", callback_data="use_default")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="format_video")],
            [InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ (MP3)", callback_data="format_audio")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∞—É–¥–∏–æ)", callback_data="use_default")]
        ])
    
    await message.answer("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª URL {url}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞")

@router.callback_query(lambda c: c.data.startswith("format_") or c.data == "use_default")
async def process_format_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞"""
    user_id = callback.from_user.id
    url = router.user_states.get(user_id, {}).get("url")
    
    if not url:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: URL –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ —Å /yt.")
        logger.error(f"URL –ø–æ—Ç–µ—Ä—è–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    if callback.data == "use_default":
        user_config = await get_user_config(kernel_data["db"], user_id) or {}
        default_format = user_config.get("default_format", "video")
        default_quality = user_config.get("default_quality", "720")
        if default_format == "video":
            await callback.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ ({default_quality}p)...")
            asyncio.create_task(process_download(callback.message, url, "video", user_id, default_quality))
        else:
            await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
            asyncio.create_task(process_download(callback.message, url, "audio", user_id))
        return
    
    format_type = callback.data.split("_")[1]
    if format_type == "video":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="360p", callback_data="quality_360")],
            [InlineKeyboardButton(text="720p", callback_data="quality_720")],
            [InlineKeyboardButton(text="1080p", callback_data="quality_1080")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–∏–¥–µ–æ –¥–ª—è {url}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞")
    elif format_type == "audio":
        await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ...")
        asyncio.create_task(process_download(callback.message, url, "audio", user_id))

@router.callback_query(lambda c: c.data.startswith("quality_") or c.data == "cancel")
async def process_quality_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã"""
    user_id = callback.from_user.id
    url = router.user_states.get(user_id, {}).get("url")
    
    if not url:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: URL –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ —Å /yt.")
        logger.error(f"URL –ø–æ—Ç–µ—Ä—è–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
    
    if callback.data == "cancel":
        await callback.message.edit_text("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
        del router.user_states[user_id]
        return
    
    quality = callback.data.split("_")[1]
    await callback.message.edit_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ ({quality}p)...")
    asyncio.create_task(process_download(callback.message, url, "video", user_id, quality))

async def process_download(message: types.Message, url: str, format_type: str, user_id: int, quality: str = None):
    """–û–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        global_config_path = os.path.join(kernel_data["base_dir"], "modules", "youtube_downloader", "config.json")
        global_config = {}
        if os.path.exists(global_config_path):
            with open(global_config_path, "r", encoding="utf-8") as f:
                import json
                global_config = json.load(f)
        max_quality = global_config.get("max_quality", "720")
        
        if quality and int(quality) > int(max_quality):
            await message.reply(f"‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ({quality}p) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ ({max_quality}p).")
            logger.warning(f"–ö–∞—á–µ—Å—Ç–≤–æ {quality}p –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ {max_quality}p –¥–ª—è {user_id}")
            return
        
        file_path, title, thumbnail_url = await download_file(url, router.download_dir, format_type, quality)
        
        file_size = os.path.getsize(file_path) / (1024 * 1024)
        if file_size > 50:
            await message.reply(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size:.2f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º: 50 –ú–ë.")
            os.remove(file_path)
            logger.warning(f"–§–∞–π–ª {title} ({file_size:.2f} –ú–ë) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –¥–ª—è {user_id}")
            return
        
        if format_type == "video":
            file = types.FSInputFile(file_path, filename=f"{title}.mp4")
            await message.reply_video(
                video=file,
                caption=f"üé• {title} ({quality}p)",
                supports_streaming=True
            )
        elif format_type == "audio":
            file = types.FSInputFile(file_path, filename=f"{title}.mp3")
            await message.reply_audio(
                audio=file,
                title=title,
                caption="üéµ –°–∫–∞—á–∞–Ω–æ"
            )
        
        logger.info(f"–§–∞–π–ª {title} ({format_type}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        os.remove(file_path)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω")
        
        if user_id in router.user_states:
            del router.user_states[user_id]
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è {url}: {e}")

async def on_startup(data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è"""
    logger.info("–ú–æ–¥—É–ª—å youtube_downloader –∑–∞–ø—É—â–µ–Ω")
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if data["db"]:
        await data["db"].execute("""
            CREATE TABLE IF NOT EXISTS user_configs (
                module_name TEXT,
                user_id INTEGER,
                config TEXT,
                PRIMARY KEY (module_name, user_id)
            )
        """)
        await data["db"].commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ user_configs –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è youtube_downloader")

async def on_shutdown(data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è"""
    logger.info("–ú–æ–¥—É–ª—å youtube_downloader –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
