from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import logging
import psutil
import platform
import subprocess
import sys
import os
import asyncio
import requests
from datetime import datetime

router = Router()
logger = logging.getLogger("modules.infosystem")
data = None
message_count = 0  # –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
cache = {"cpu": None, "memory": None, "disk": None}
cache_timeout = 60  # –ö—ç—à –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

async def update_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö CPU, RAM, ROM"""
    while True:
        cache["cpu"] = psutil.cpu_percent(interval=0.1)
        cache["memory"] = psutil.virtual_memory().percent
        cache["disk"] = psutil.disk_usage('/').percent
        await asyncio.sleep(cache_timeout)

def setup(d):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è"""
    global data
    dp = d["dp"]
    data = d
    dp.include_router(router)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    data["background_tasks"].append(update_cache)
    logger.info("üõ† –ú–æ–¥—É–ª—å InfoSystem –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def get_commands():
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è"""
    return [
        types.BotCommand(command="/info", description="‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        types.BotCommand(command="/botstats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
    ]

def is_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤ Docker"""
    try:
        with open("/proc/1/cgroup", "r") as f:
            return "docker" in f.read()
    except FileNotFoundError:
        return False

def is_wsl():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç –≤ WSL"""
    return "microsoft" in platform.uname().release.lower()

def get_cpu_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
    cpu_usage = cache["cpu"]
    cpu_model = platform.processor() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    cpu_freq = psutil.cpu_freq()
    freq_info = f"{cpu_freq.current:.2f} –ú–ì—Ü" if cpu_freq else "–ù/–î"
    cores = psutil.cpu_count(logical=True)
    physical_cores = psutil.cpu_count(logical=False)
    return (f"üñ• –¶–ü:\n"
            f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {cpu_usage}%\n"
            f"üß© –ú–æ–¥–µ–ª—å: {cpu_model}\n"
            f"‚è± –ß–∞—Å—Ç–æ—Ç–∞: {freq_info}\n"
            f"üî¢ –Ø–¥–µ—Ä: {cores} (—Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö: {physical_cores})")

def get_memory_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RAM"""
    memory = psutil.virtual_memory()
    total = memory.total / (1024 ** 3)  # –ì–ë
    used = memory.used / (1024 ** 3)
    free = memory.available / (1024 ** 3)
    return (f"üíæ –ü–∞–º—è—Ç—å:\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {cache['memory']}%\n"
            f"üì¶ –í—Å–µ–≥–æ: {total:.2f} –ì–ë\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used:.2f} –ì–ë\n"
            f"üìâ –°–≤–æ–±–æ–¥–Ω–æ: {free:.2f} –ì–ë")

def get_disk_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ROM (–¥–∏—Å–∫–µ)"""
    disk = psutil.disk_usage('/')
    total = disk.total / (1024 ** 3)  # –ì–ë
    used = disk.used / (1024 ** 3)
    free = disk.free / (1024 ** 3)
    return (f"üìÄ –î–∏—Å–∫ (/):\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {cache['disk']}%\n"
            f"üì¶ –í—Å–µ–≥–æ: {total:.2f} –ì–ë\n"
            f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used:.2f} –ì–ë\n"
            f"üìâ –°–≤–æ–±–æ–¥–Ω–æ: {free:.2f} –ì–ë")

def get_system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    env = "Docker" if is_docker() else "WSL" if is_wsl() else "Native OS"
    return f"üõ† –û–∫—Ä—É–∂–µ–Ω–∏–µ:\nüåç –¢–∏–ø: {env}"

def get_network_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ —Å –≤–Ω–µ—à–Ω–∏–º –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º IP"""
    net_io = psutil.net_io_counters()
    bytes_sent = net_io.bytes_sent / (1024 ** 2)  # –ú–ë
    bytes_recv = net_io.bytes_recv / (1024 ** 2)  # –ú–ë
    try:
        external_ip = requests.get("https://api.ipify.org", timeout=5).text
    except Exception as e:
        external_ip = f"–û—à–∏–±–∫–∞ ({e})"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
    interfaces = psutil.net_if_addrs()
    internal_network = ""
    for iface, addrs in interfaces.items():
        for addr in addrs:
            if addr.family == 2:  # AF_INET (IPv4)
                internal_network += f"{iface}: {addr.address}\n"
    internal_network = internal_network.strip() or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    return (f"üåê –°–µ—Ç—å:\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bytes_sent:.2f} –ú–ë\n"
            f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {bytes_recv:.2f} –ú–ë\n"
            f"üåç –í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n"
            f"üñß –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Ç—å:\n{internal_network}")

def get_os_updates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö UNIX-—Å–∏—Å—Ç–µ–º"""
    os_name = platform.system().lower()
    if "linux" not in os_name and "darwin" not in os_name and "bsd" not in os_name:
        return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ UNIX-—Å–∏—Å—Ç–µ–º—ã"

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux –∏–ª–∏ —Ç–∏–ø UNIX
        if "linux" in os_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
            if os.path.exists("/etc/debian_version") or os.path.exists("/usr/bin/apt-get"):
                # Debian/Ubuntu (APT)
                subprocess.run(["apt-get", "update"], capture_output=True, text=True, check=True)
                result = subprocess.run(["apt", "list", "--upgradable"], capture_output=True, text=True)
                updates = result.stdout.splitlines()
                if len(updates) > 1:
                    try:
                        subprocess.run(["sudo", "apt-get", "upgrade", "-y"], capture_output=True, text=True, check=True)
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(updates)-1} –ø–∞–∫–µ—Ç–æ–≤ (Debian/Ubuntu)"
                    except subprocess.CalledProcessError:
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ {len(updates)-1} –ø–∞–∫–µ—Ç–æ–≤ (–Ω—É–∂–µ–Ω sudo –¥–ª—è APT)"
                return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã (Debian/Ubuntu)"

            elif os.path.exists("/etc/redhat-release") or os.path.exists("/usr/bin/dnf") or os.path.exists("/usr/bin/yum"):
                # Fedora/CentOS/RHEL (DNF –∏–ª–∏ YUM)
                pkg_manager = "dnf" if os.path.exists("/usr/bin/dnf") else "yum"
                result = subprocess.run([pkg_manager, "check-update"], capture_output=True, text=True)
                updates = [line for line in result.stdout.splitlines() if line and not line.startswith(("Last", "Security"))]
                if updates:
                    try:
                        subprocess.run(["sudo", pkg_manager, "upgrade", "-y"], capture_output=True, text=True, check=True)
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} –ø–∞–∫–µ—Ç–æ–≤ ({pkg_manager})"
                    except subprocess.CalledProcessError:
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ {len(updates)} –ø–∞–∫–µ—Ç–æ–≤ (–Ω—É–∂–µ–Ω sudo –¥–ª—è {pkg_manager})"
                return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã ({pkg_manager})"

            elif os.path.exists("/etc/arch-release") or os.path.exists("/usr/bin/pacman"):
                # Arch Linux (Pacman)
                result = subprocess.run(["pacman", "-Qu"], capture_output=True, text=True, check=True)
                updates = result.stdout.splitlines()
                if updates:
                    try:
                        subprocess.run(["sudo", "pacman", "-Syu", "--noconfirm"], capture_output=True, text=True, check=True)
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} –ø–∞–∫–µ—Ç–æ–≤ (Arch)"
                    except subprocess.CalledProcessError:
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ {len(updates)} –ø–∞–∫–µ—Ç–æ–≤ (–Ω—É–∂–µ–Ω sudo –¥–ª—è Pacman)"
                return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã (Arch)"

            else:
                return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux"

        elif "darwin" in os_name:
            # macOS (Homebrew)
            if os.path.exists("/usr/local/bin/brew") or os.path.exists("/opt/homebrew/bin/brew"):
                subprocess.run(["brew", "update"], capture_output=True, text=True, check=True)
                result = subprocess.run(["brew", "outdated"], capture_output=True, text=True)
                updates = result.stdout.splitlines()
                if updates:
                    try:
                        subprocess.run(["brew", "upgrade"], capture_output=True, text=True, check=True)
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} –ø–∞–∫–µ—Ç–æ–≤ (Homebrew)"
                    except subprocess.CalledProcessError:
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ {len(updates)} –ø–∞–∫–µ—Ç–æ–≤ (–æ—à–∏–±–∫–∞ Homebrew)"
                return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã (Homebrew)"
            return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (macOS)"

        elif "bsd" in os_name:
            # FreeBSD (pkg)
            if os.path.exists("/usr/sbin/pkg"):
                result = subprocess.run(["pkg", "upgrade", "-n"], capture_output=True, text=True)
                updates = result.stdout.splitlines()
                if "0 packages" not in result.stdout:
                    try:
                        subprocess.run(["sudo", "pkg", "upgrade", "-y"], capture_output=True, text=True, check=True)
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã (FreeBSD)"
                    except subprocess.CalledProcessError:
                        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω—É–∂–µ–Ω sudo –¥–ª—è pkg)"
                return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã (FreeBSD)"
            return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: pkg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (FreeBSD)"

        return "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è UNIX-—Å–∏—Å—Ç–µ–º–∞"

    except subprocess.CalledProcessError as e:
        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –æ—à–∏–±–∫–∞ ({e.stderr})"
    except Exception as e:
        return f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –æ—à–∏–±–∫–∞ ({e})"

def get_bot_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    global message_count
    try:
        uptime = datetime.now() - data["start_time"]
        return (f"ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {str(uptime).split('.')[0]}\n"
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
        return "ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"

def get_info_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ• –¶–ü", callback_data="info_cpu")],
        [InlineKeyboardButton(text="üíæ –ü–∞–º—è—Ç—å", callback_data="info_memory")],
        [InlineKeyboardButton(text="üìÄ –î–∏—Å–∫", callback_data="info_disk")],
        [InlineKeyboardButton(text="üõ† –û–∫—Ä—É–∂–µ–Ω–∏–µ", callback_data="info_system")],
        [InlineKeyboardButton(text="üåê –°–µ—Ç—å", callback_data="info_network")],
        [InlineKeyboardButton(text="üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="info_updates")],
        [InlineKeyboardButton(text="ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="info_botstats")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_refresh")]
    ])
    return "üì° –í—ã–±–µ—Ä–∏—Ç–µ:", keyboard

@router.message(Command("info"))
async def info_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    global message_count
    message_count += 1
    if message.from_user.id not in data["admin_ids"]:
        await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ /info –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {message.from_user.id}")
        return
    
    text, keyboard = get_info_menu()
    await message.answer(text, reply_markup=keyboard)
    logger.info(f"üìå –ü–∞–Ω–µ–ª—å /info –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {message.from_user.id}")

@router.message(Command("botstats"))
async def botstats_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /botstats"""
    global message_count
    message_count += 1
    if message.from_user.id not in data["admin_ids"]:
        await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ /botstats –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {message.from_user.id}")
        return
    stats = get_bot_stats()
    await message.answer(stats)
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {message.from_user.id}")

@router.callback_query(lambda c: c.data.startswith("info_"))
async def info_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    global message_count
    message_count += 1
    logger.info(f"üì© Callback: {callback.data} –æ—Ç {callback.from_user.id}")
    if callback.from_user.id not in data["admin_ids"]:
        await callback.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è callback {callback.data} –æ—Ç {callback.from_user.id}")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ• –¶–ü", callback_data="info_cpu")],
        [InlineKeyboardButton(text="üíæ –ü–∞–º—è—Ç—å", callback_data="info_memory")],
        [InlineKeyboardButton(text="üìÄ –î–∏—Å–∫", callback_data="info_disk")],
        [InlineKeyboardButton(text="üõ† –û–∫—Ä—É–∂–µ–Ω–∏–µ", callback_data="info_system")],
        [InlineKeyboardButton(text="üåê –°–µ—Ç—å", callback_data="info_network")],
        [InlineKeyboardButton(text="üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="info_updates")],
        [InlineKeyboardButton(text="ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="info_botstats")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="info_refresh")]
    ])

    if callback.data == "info_cpu":
        info = get_cpu_info()
    elif callback.data == "info_memory":
        info = get_memory_info()
    elif callback.data == "info_disk":
        info = get_disk_info()
    elif callback.data == "info_system":
        info = get_system_info()
    elif callback.data == "info_network":
        info = get_network_info()
    elif callback.data == "info_updates":
        info = get_os_updates()
    elif callback.data == "info_botstats":
        info = get_bot_stats()
    elif callback.data == "info_refresh":
        info = "üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"

    await callback.message.edit_text(info, reply_markup=keyboard)
    await callback.answer()
    logger.info(f"üì§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {callback.from_user.id}")

async def on_startup(d):
    """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
    logger.info("üöÄ –ú–æ–¥—É–ª—å InfoSystem –∑–∞–ø—É—â–µ–Ω.")

async def on_shutdown(d):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è"""
    logger.info("üì¥ –ú–æ–¥—É–ª—å InfoSystem –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
