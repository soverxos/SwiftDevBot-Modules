"""
–ú–æ–¥—É–ª—å GeminiAI –¥–ª—è SwiftDevBot
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Gemini AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Telegram.
"""

from aiogram import Router, types
from aiogram.filters import Command
import aiohttp
import logging
import os
from datetime import datetime
import asyncio
from dotenv import load_dotenv
import re

router = Router()
logger = logging.getLogger("gemini_ai")
kernel_data = None
GEMINI_KEY = None
DB_PATH = None
CONTEXT_PATH = None

async def init_db(db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è GeminiAI."""
    await db.execute('''CREATE TABLE IF NOT EXISTS gemini_cache 
                        (question TEXT PRIMARY KEY, answer TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    await db.execute('''CREATE TABLE IF NOT EXISTS gemini_conversations 
                        (chat_id INTEGER, question TEXT, answer TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    await db.execute('''CREATE TABLE IF NOT EXISTS gemini_settings 
                        (chat_id INTEGER PRIMARY KEY, mode TEXT DEFAULT 'friendly')''')
    await db.execute('''CREATE TABLE IF NOT EXISTS gemini_rate_limit 
                        (chat_id INTEGER PRIMARY KEY, last_request TIMESTAMP)''')
    await db.commit()
    logger.info("üìä –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GeminiAI —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

def setup(data):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."""
    global kernel_data, DB_PATH, CONTEXT_PATH, GEMINI_KEY
    dp = data["dp"]
    kernel_data = data
    DB_PATH = os.path.join(kernel_data["base_dir"], "data", "cache.db")
    CONTEXT_PATH = os.path.join(kernel_data["base_dir"], "data", "swiftdevbot_context.txt")
    env_path = os.path.join(kernel_data["base_dir"], ".env")
    load_dotenv(env_path)
    GEMINI_KEY = os.getenv("GEMINI_KEY")
    if not GEMINI_KEY:
        logger.error("GEMINI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        raise ValueError("GEMINI_KEY must be set in .env")
    
    asyncio.create_task(init_db(kernel_data["db"]))
    dp.include_router(router)
    logger.info("üõ† –ú–æ–¥—É–ª—å GeminiAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def get_commands():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è."""
    return [
        {"command": "mode", "description": "ü§ñ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò (formal, friendly, sarcastic)", "admin": False, "icon": "ü§ñ", "category": "GeminiAI"},
        {"command": "clearcache", "description": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–∞–¥–º–∏–Ω)", "admin": True, "icon": "üßπ", "category": "GeminiAI"}
    ]

async def format_response(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ HTML –¥–ª—è Telegram."""
    text = re.sub(r'ü§ñ\s*(?:\*\*.*?\*\*:?|SwiftDevBot:)\s*\n*', '', text)
    text = re.sub(r'\*+\s*', '', text)
    lines = text.split('\n')
    formatted = ""
    for line in lines:
        line = line.strip()
        if line:
            if ':' in line and len(line.split(':')[0].strip()) < 50:
                title, content = line.split(':', 1)
                formatted += f"<b>‚Ä¢ {title.strip()}:</b> {content.strip()}\n\n"
            else:
                formatted += f"{line}\n\n"
    return formatted.strip()

async def ask_gemini(question, chat_id):
    """–ó–∞–ø—Ä–æ—Å –∫ Gemini AI —Å —É—á–µ—Ç–æ–º –∫—ç—à–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    db = kernel_data["db"]
    async with db.execute("SELECT answer FROM gemini_cache WHERE question = ?", (question,)) as cursor:
        cached = await cursor.fetchone()
    if cached:
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è: {question}")
        return cached[0]

    async with db.execute("SELECT mode FROM gemini_settings WHERE chat_id = ?", (chat_id,)) as cursor:
        mode_result = await cursor.fetchone()
    mode = mode_result[0] if mode_result else "friendly"

    async with db.execute("SELECT question, answer FROM gemini_conversations WHERE chat_id = ? ORDER BY timestamp DESC LIMIT 5", (chat_id,)) as cursor:
        history = await cursor.fetchall()
    context = "\n".join([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {q}\nSwiftDevBot: {a}" for q, a in reversed(history)]) if history else ""

    try:
        with open(CONTEXT_PATH, "r", encoding="utf-8") as f:
            project_context = f.read()
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {CONTEXT_PATH}: {project_context[:100]}...")
    except FileNotFoundError:
        project_context = "–Ø ‚Äî SwiftDevBot, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {CONTEXT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")

    mode_prompts = {
        "formal": "–û—Ç–≤–µ—á–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.",
        "friendly": "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ.",
        "sarcastic": "–û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —é–º–æ—Ä–æ–º."
    }
    prompt = f"{project_context}\n\n–¢—ã ‚Äî SwiftDevBot, —Ä—É—Å—Å–∫–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram. {mode_prompts[mode]} –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}"

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_KEY}"
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {"temperature": 0.9, "topK": 1, "topP": 1, "maxOutputTokens": 2048, "stopSequences": []},
        "safetySettings": [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"}
        ]
    }
    max_retries = 3
    for attempt in range(max_retries):
        try:
            async with aiohttp.ClientSession() as session:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {question}")
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        if "candidates" in result and result["candidates"]:
                            answer = result["candidates"][0]["content"]["parts"][0]["text"]
                            formatted_answer = await format_response(answer)
                            full_answer = f"<b>ü§ñ SwiftDevBot:</b>\n\n{formatted_answer}"
                            await db.execute("INSERT OR REPLACE INTO gemini_cache (question, answer) VALUES (?, ?)", (question, full_answer))
                            await db.execute("INSERT INTO gemini_conversations (chat_id, question, answer) VALUES (?, ?, ?)", (chat_id, question, full_answer))
                            await db.commit()
                            return full_answer
                        return "‚ùå SwiftDevBot –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
                    elif response.status == 503:
                        if attempt < max_retries - 1:
                            await asyncio.sleep(2)
                            continue
                        return "‚ùå –°–µ—Ä–≤–µ—Ä –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç Gemini: {response.status} - {error_text}")
                        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
                continue
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

@router.message(lambda message: not message.text.startswith('/') and len(message.text) >= 3 and message.chat.type == "private")
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö."""
    db = kernel_data["db"]
    async with db.execute("SELECT last_request FROM gemini_rate_limit WHERE chat_id = ?", (message.chat.id,)) as cursor:
        last = await cursor.fetchone()
    if last and (datetime.now() - datetime.fromisoformat(last[0])).total_seconds() < 5:
        await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥.")
        return
    question = message.text
    answer = await ask_gemini(question, message.chat.id)
    await message.answer(answer, parse_mode="HTML")
    await db.execute("INSERT OR REPLACE INTO gemini_rate_limit (chat_id, last_request) VALUES (?, ?)", 
                     (message.chat.id, datetime.now().isoformat()))
    await db.commit()
    logger.info(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {question}")

@router.message(Command("mode"))
async def mode_command(message: types.Message):
    """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –ò–ò."""
    if not message.text.split(maxsplit=1)[1:]:
        await message.answer("–£–∫–∞–∂–∏ —Ä–µ–∂–∏–º: <code>/mode formal</code>, <code>/mode friendly</code>, <code>/mode sarcastic</code>", parse_mode="HTML")
        return
    mode = message.text.split(maxsplit=1)[1].lower()
    if mode not in ["formal", "friendly", "sarcastic"]:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: <code>formal</code>, <code>friendly</code>, <code>sarcastic</code>", parse_mode="HTML")
        return
    db = kernel_data["db"]
    await db.execute("INSERT OR REPLACE INTO gemini_settings (chat_id, mode) VALUES (?, ?)", (message.chat.id, mode))
    await db.commit()
    await message.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <code>{mode}</code>", parse_mode="HTML")
    logger.info(f"–†–µ–∂–∏–º –¥–ª—è {message.from_user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {mode}")

@router.message(Command("clearcache"))
async def clear_cache_command(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    if message.from_user.id not in kernel_data["admin_ids"]:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return
    db = kernel_data["db"]
    await db.execute("DELETE FROM gemini_cache")
    await db.execute("DELETE FROM gemini_conversations")
    await db.commit()
    deleted_cache = db.total_changes
    await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ <code>{deleted_cache}</code> –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏.", parse_mode="HTML")
    logger.info(f"–ö—ç—à –∏ –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}, —É–¥–∞–ª–µ–Ω–æ {deleted_cache} –∑–∞–ø–∏—Å–µ–π")

def get_settings(kernel_data):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ /sysconf."""
    text = (
        "ü§ñ –ú–æ–¥—É–ª—å GeminiAI\n"
        f"API-–∫–ª—é—á: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GEMINI_KEY else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        "–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google Gemini AI –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª."
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    return text, keyboard

async def on_startup(data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è."""
    logger.info("üöÄ –ú–æ–¥—É–ª—å GeminiAI –∑–∞–ø—É—â–µ–Ω.")

async def on_shutdown(data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
    logger.info("üì¥ –ú–æ–¥—É–ª—å GeminiAI –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")