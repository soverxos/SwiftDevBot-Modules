# /modules/gemini_ai/module.py

import logging
from logging.handlers import RotatingFileHandler
import os
import asyncio
import aiosqlite
import re
import json # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å config.json
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, List, Tuple, Optional

import aiohttp

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.filters.command import CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
)
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç cryptography –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
try:
    from cryptography.fernet import Fernet, InvalidToken
    CRYPTOGRAPHY_AVAILABLE = True
except ImportError:
    CRYPTOGRAPHY_AVAILABLE = False
    Fernet = None # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ None, –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    InvalidToken = None
    logging.getLogger(__name__).error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'cryptography' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π API –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cryptography")


# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å black
try:
    import black
    BLACK_AVAILABLE = True
except ImportError:
    BLACK_AVAILABLE = False
    black = None

# --- –õ–æ–≥–≥–µ—Ä –º–æ–¥—É–ª—è ---
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# --- –†–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è ---
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class GeminiAIStates(StatesGroup):
    waiting_for_api_key = State()
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# --- –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω—ã –¥–ª—è FSM ---
cancel_button = KeyboardButton(text="/cancel")
cancel_kb = ReplyKeyboardMarkup(keyboard=[[cancel_button]], resize_keyboard=True, one_time_keyboard=True)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è ---
CONTEXT_PATH: str | None = None
DEFAULT_CONTEXT: str = "–Ø ‚Äî SwiftDevBot, Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def init_db(kernel_data: Dict[str, Any]):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –º–æ–¥—É–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î."""
    db = kernel_data.get("db")
    if db is None: logger.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GeminiAI"); return
    try:
        await db.execute('''CREATE TABLE IF NOT EXISTS gemini_cache (question TEXT PRIMARY KEY, answer TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS gemini_conversations (id INTEGER PRIMARY KEY AUTOINCREMENT, chat_id INTEGER NOT NULL, question TEXT, answer TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS gemini_settings (chat_id INTEGER PRIMARY KEY, mode TEXT DEFAULT 'friendly')''')
        await db.execute('''CREATE TABLE IF NOT EXISTS gemini_rate_limit (chat_id INTEGER PRIMARY KEY, last_request TIMESTAMP)''')
        await db.execute("CREATE INDEX IF NOT EXISTS idx_gemini_conv_chat_id ON gemini_conversations (chat_id)")
        await db.commit()
        logger.info("üìä –¢–∞–±–ª–∏—Ü—ã GeminiAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except aiosqlite.Error as e: logger.error(f"‚ùå –û—à–∏–±–∫–∞ init_db GeminiAI: {e}", exc_info=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def load_project_context() -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    # ... (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ –∏–ª–∏ –º–µ–Ω—è–µ–º –Ω–∞ aiofiles) ...
    if CONTEXT_PATH and os.path.exists(CONTEXT_PATH):
        try:
            with open(CONTEXT_PATH, "r", encoding="utf-8") as f:
                content = f.read()
                logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {CONTEXT_PATH}: {len(content)} —Å–∏–º–≤.")
                return content
        except OSError as e: logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {CONTEXT_PATH}: {e}"); return DEFAULT_CONTEXT
    else: logger.warning(f"–§–∞–π–ª {CONTEXT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω."); return DEFAULT_CONTEXT

def format_response(text: str) -> str:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Gemini."""
    text = re.sub(r'^ü§ñ\s*(\*\*.*?\*\*[:\s]*)?(SwiftDevBot[:\s]*)?', '', text).strip()
    text = text.replace('*', '')
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    formatted_lines = []
    for line in lines:
         if len(line) < 60 or ':' in line.split(' ', 1)[0]: # –ß—É—Ç—å –∏–∑–º–µ–Ω–∏–º –ª–æ–≥–∏–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
              formatted_lines.append(f"<b>{line}</b>")
         else: formatted_lines.append(line)
    return "\n\n".join(formatted_lines)

async def _reply_with_fallback(message: types.Message, text: str, **kwargs):
     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, –ø—ã—Ç–∞—è—Å—å —Å HTML, –ø—Ä–∏ –æ—à–∏–±–∫–µ - –±–µ–∑."""
     try: await message.reply(text, parse_mode="HTML", **kwargs)
     except TelegramBadRequest as e:
         if "can't parse entities" in str(e):
             logger.warning(f"–û—à–∏–±–∫–∞ HTML: {e}. –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."); safe_text = re.sub(r"<[^>]*>", "", text)
             await message.reply(safe_text, parse_mode=None, **kwargs)
         else: logger.error(f"–û—à–∏–±–∫–∞ TG BadRequest: {e}"); await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e.message}", **kwargs)
     except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True); await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.", **kwargs)

def _get_decrypted_key(kernel_data: Dict[str, Any]) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –¥–µ—à–∏—Ñ—Ä—É–µ—Ç –∫–ª—é—á API –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
    fernet = kernel_data.get("encryption_key")
    encrypted_key = kernel_data.get("config", {}).get("module_secrets", {}).get("gemini_ai")

    if not fernet: logger.error("–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (Fernet) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"); return None
    if not encrypted_key: logger.debug("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á GeminiAI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ."); return None

    try:
        decrypted_key = fernet.decrypt(encrypted_key.encode()).decode()
        return decrypted_key
    except InvalidToken: logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á GeminiAI."); return None
    except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–ª—é—á–∞ GeminiAI: {e}", exc_info=True); return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini ---
async def ask_gemini(kernel_data: Dict[str, Any], question: str, chat_id: int) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Gemini AI."""
    db = kernel_data.get("db")
    gemini_key = _get_decrypted_key(kernel_data) # –ü–æ–ª—É—á–∞–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á

    if db is None: logger.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"); return "‚ùå –û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    if not gemini_key: return "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ /sysconf."

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        async with db.execute("SELECT answer FROM gemini_cache WHERE question = ?", (question,)) as cursor:
            cached = await cursor.fetchone()
        if cached: logger.info(f"üîç –ö—ç—à: '{question[:50]}...'"); return cached[0]
    except aiosqlite.Error as e: logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∏—Å—Ç–æ—Ä–∏–∏
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    mode = 'friendly'; history_context = ''
    try:
        async with db.execute("SELECT mode FROM gemini_settings WHERE chat_id = ?", (chat_id,)) as cursor:
            mode_result = await cursor.fetchone(); mode = mode_result[0] if mode_result else mode
        async with db.execute("SELECT question, answer FROM gemini_conversations WHERE chat_id = ? ORDER BY timestamp DESC LIMIT 5", (chat_id,)) as cursor:
            history = await cursor.fetchall()
            if history: history_context = "\n".join([f"User: {q}\nAI: {re.sub('<[^>]*>', '', a)}" for q, a in reversed(history)])
    except aiosqlite.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫/–∏—Å—Ç–æ—Ä–∏–∏: {e}")

    # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    # ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    project_context = await load_project_context()
    mode_prompts = {"formal": "–û—Ç–≤–µ—á–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ...", "friendly": "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ...", "sarcastic": "–û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º..."}
    prompt = f"{project_context}\n\n–¢—ã ‚Äî SwiftDevBot...\n–°—Ç–∏–ª—å: {mode_prompts.get(mode, mode_prompts['friendly'])}\n\n–î–∏–∞–ª–æ–≥:\n{history_context}\n\n---\n–í–æ–ø—Ä–æ—Å:\n{question}".strip()


    # 4. –ó–∞–ø—Ä–æ—Å –∫ API Gemini
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={gemini_key}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
    payload = { # ... (payload –∫–∞–∫ –±—ã–ª) ...
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {"temperature": 0.8, "topK": 10, "topP": 0.95, "maxOutputTokens": 2048},
        "safetySettings": [{"category": c, "threshold": "BLOCK_MEDIUM_AND_ABOVE"} for c in ["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT"]]
    }
    max_retries = 2; base_delay = 1.5
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
        for attempt in range(max_retries):
            try:
                logger.info(f"-> Gemini [–ü–æ–ø. {attempt+1}/{max_retries}]: '{question[:50]}...'")
                async with session.post(url, json=payload) as response:
                    # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞, —Ä–µ—Ç—Ä–∞–µ–≤, –æ—à–∏–±–æ–∫ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                    if response.status == 200:
                        try:
                            result = await response.json()
                            if result.get("candidates") and result["candidates"][0].get("content", {}).get("parts"):
                                raw_answer = result["candidates"][0]["content"]["parts"][0]["text"]
                                formatted_answer = format_response(raw_answer)
                                full_answer = f"<b>ü§ñ SwiftDevBot:</b>\n\n{formatted_answer}" # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –î–û –∫—ç—à–∞
                                try: # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                                     await db.execute("INSERT OR REPLACE INTO gemini_cache (question, answer) VALUES (?, ?)", (question, full_answer))
                                     await db.execute("INSERT INTO gemini_conversations (chat_id, question, answer) VALUES (?, ?, ?)", (chat_id, question, full_answer))
                                     await db.commit()
                                except aiosqlite.Error as db_e: logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ Gemini: {db_e}")
                                logger.info(f"<- –û—Ç–≤–µ—Ç Gemini –ø–æ–ª—É—á–µ–Ω –¥–ª—è '{question[:50]}...'")
                                return full_answer
                            else: # –û—Ç–≤–µ—Ç 200, –Ω–æ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                                reason = result.get("promptFeedback", {}).get("blockReason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                                logger.warning(f"–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Ç Gemini. –ü—Ä–∏—á–∏–Ω–∞: {reason}."); return f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–§–∏–ª—å—Ç—Ä: {reason})."
                        except (aiohttp.ContentTypeError, json.JSONDecodeError) as json_err: logger.error(f"–û—à–∏–±–∫–∞ JSON Gemini: {json_err}"); return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò."
                    elif response.status in [429, 500, 503] and attempt < max_retries - 1: # –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞/–ª–∏–º–∏—Ç—ã
                        delay = base_delay * (2 ** attempt); logger.warning(f"Gemini {response.status}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫..."); await asyncio.sleep(delay); continue
                    else: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                        err_text = await response.text(); logger.error(f"–û—à–∏–±–∫–∞ Gemini {response.status}: {err_text[:500]}"); msg = "‚ùå –û—à–∏–±–∫–∞ –ò–ò.";
                        if response.status == 400: msg = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (API –∫–ª—é—á?)."; elif response.status == 429: msg = "‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤."; elif response.status >= 500: msg = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ò–ò."; return msg
            except asyncio.TimeoutError: logger.error(f"–¢–∞–π–º–∞—É—Ç Gemini (–ü–æ–ø. {attempt + 1})"); if attempt < max_retries - 1: await asyncio.sleep(base_delay); continue; else: return "‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è."
            except aiohttp.ClientError as e: logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Gemini (–ü–æ–ø. {attempt + 1}): {e}"); if attempt < max_retries - 1: await asyncio.sleep(base_delay); continue; else: return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ò–ò."
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ ask_gemini (–ü–æ–ø. {attempt + 1}): {e}", exc_info=True); 
            if attempt < max_retries - 1: await asyncio.sleep(base_delay); continue; else: return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ò–ò."
        return "‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫." # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ—Ç—Ä–∞–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(F.text & ~F.text.startswith('/') & (F.text.len() >= 3) & F.chat.type == "private")
async def handle_message(message: types.Message, kernel_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ Gemini."""
    db = kernel_data.get("db"); bot_ = kernel_data.get("bot")
    if db is None or bot_ is None: await message.reply("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); return

    chat_id = message.chat.id; user_id = message.from_user.id; question = message.text
    rate_limit_seconds = 5; now = datetime.now(timezone.utc)
    try:
        async with db.execute("SELECT last_request FROM gemini_rate_limit WHERE chat_id = ?", (chat_id,)) as cursor: last_req_data = await cursor.fetchone()
        if last_req_data: last_req_time = datetime.fromisoformat(last_req_data[0]).replace(tzinfo=timezone.utc);
        if (now - last_req_time) < timedelta(seconds=rate_limit_seconds): await message.reply(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ {rate_limit_seconds} —Å–µ–∫."); return
    except (aiosqlite.Error, ValueError) as e: logger.error(f"–û—à–∏–±–∫–∞ rate limit {chat_id}: {e}")

    await bot_.send_chat_action(chat_id=chat_id, action="typing")
    answer = await ask_gemini(kernel_data, question, chat_id)
    await _reply_with_fallback(message, answer)
    try: await db.execute("INSERT OR REPLACE INTO gemini_rate_limit (chat_id, last_request) VALUES (?, ?)", (chat_id, now.isoformat())); await db.commit()
    except aiosqlite.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è rate limit {chat_id}: {e}")
    logger.info(f"ü§ñ –í–æ–ø—Ä–æ—Å –æ—Ç {user_id}: '{question[:50]}...'")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(Command("mode"))
async def mode_command(message: types.Message, command: CommandObject, kernel_data: dict):
    """–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –ò–ò."""
    db = kernel_data.get("db");
    if db is None: await message.reply("‚ùå –û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    new_mode = command.args.strip().lower() if command.args else None
    valid_modes = ["formal", "friendly", "sarcastic"]
    chat_id = message.chat.id

    if not new_mode: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        current_mode = 'friendly'
        try: async with db.execute("SELECT mode FROM gemini_settings WHERE chat_id = ?", (chat_id,)) as c: mode_res = await c.fetchone(); current_mode = mode_res[0] if mode_res else current_mode
        except aiosqlite.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ {chat_id}: {e}"); await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞."); return
        await message.reply(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π: `{current_mode}`.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join([f'`{m}`' for m in valid_modes])}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/mode [—Ä–µ–∂–∏–º]`", parse_mode="Markdown")
        return

    if new_mode not in valid_modes: await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join([f'`{m}`' for m in valid_modes])}", parse_mode="Markdown"); return

    try: await db.execute("INSERT OR REPLACE INTO gemini_settings (chat_id, mode) VALUES (?, ?)", (chat_id, new_mode)); await db.commit()
    except aiosqlite.Error as e: logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞: {e}"); await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞."); return
    await message.reply(f"‚úÖ –†–µ–∂–∏–º –ò–ò –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: `{new_mode}`", parse_mode="Markdown")
    logger.info(f"–†–µ–∂–∏–º –¥–ª—è {message.from_user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_mode}")


@router.message(Command("clearcache"))
async def clear_cache_command(message: types.Message, kernel_data: dict):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ GeminiAI (–∞–¥–º–∏–Ω)."""
    if message.from_user.id not in kernel_data.get("admin_ids", []): await message.reply("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!"); return
    db = kernel_data.get("db");
    if db is None: await message.reply("‚ùå –û—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return
    try:
        async with db.execute("SELECT COUNT(*) FROM gemini_cache") as c1: cache_count = (await c1.fetchone())[0]
        async with db.execute("SELECT COUNT(*) FROM gemini_conversations") as c2: conv_count = (await c2.fetchone())[0]
        await db.execute("DELETE FROM gemini_cache"); await db.execute("DELETE FROM gemini_conversations"); await db.commit()
        await message.reply(f"üßπ –ö—ç—à (`{cache_count}`) –∏ –∏—Å—Ç–æ—Ä–∏—è (`{conv_count}`) GeminiAI –æ—á–∏—â–µ–Ω—ã.", parse_mode="Markdown")
        logger.info(f"–ö—ç—à/–∏—Å—Ç–æ—Ä–∏—è GeminiAI –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
    except aiosqlite.Error as e: logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ GeminiAI: {e}"); await message.reply(f"‚ùå –û—à–∏–±–∫–∞: `{e}`")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞ API —á–µ—Ä–µ–∑ /sysconf ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á" –≤ /sysconf
@router.callback_query(F.data == "gemini:set_key")
async def set_key_start(callback: types.CallbackQuery, state: FSMContext, kernel_data: dict):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    if not CRYPTOGRAPHY_AVAILABLE: await callback.answer("–û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ cryptography –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=True); return
    if not kernel_data.get("encryption_key"): await callback.answer("–û—à–∏–±–∫–∞: –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –±–æ—Ç–µ!", show_alert=True); return

    await callback.message.edit_text("üîë –í–≤–µ–¥–∏—Ç–µ Google Gemini API –∫–ª—é—á.\n"
                                     "_(–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ)_",
                                     reply_markup=None, parse_mode="Markdown")
    await state.set_state(GeminiAIStates.waiting_for_api_key)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
@router.message(GeminiAIStates.waiting_for_api_key, F.text)
async def process_api_key(message: types.Message, state: FSMContext, kernel_data: dict):
    api_key = message.text.strip()
    original_message_id = message.message_id # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    try: await message.delete() # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
    except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º: {e}")

    if not api_key or len(api_key) < 10: # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
         await message.answer("‚ùå –ö–ª—é—á –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.", reply_markup=cancel_kb)
         return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    fernet = kernel_data.get("encryption_key")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ fernet (—Ö–æ—Ç—è –æ–Ω–∞ –µ—Å—Ç—å –∏ –≤ set_key_start)
    if not fernet:
         await message.answer("‚ùå –û—à–∏–±–∫–∞: –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=ReplyKeyboardRemove())
         await state.clear(); return

    try:
        encrypted_key = fernet.encrypt(api_key.encode()).decode()
        config_path = os.path.join(kernel_data["base_dir"], "data", "config.json")
        config = kernel_data["config"]
        config.setdefault("module_secrets", {})["gemini_ai"] = encrypted_key

        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        logger.info(f"–ö–ª—é—á GeminiAI —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω) –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer("‚úÖ API –∫–ª—é—á Gemini —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω.", reply_markup=ReplyKeyboardRemove())

        # –í–∞–∂–Ω–æ: –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞, –Ω—É–∂–Ω–æ –µ–≥–æ –∫–∞–∫-—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ kernel_data,
        # —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ ask_gemini) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á.
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º kernel_data:
        kernel_data["config"] = config
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ kernel_data –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    except (OSError, TypeError, json.JSONDecodeError) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config.json —Å –∫–ª—é—á–æ–º Gemini: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–∞ Gemini: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞.", reply_markup=ReplyKeyboardRemove())

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞
@router.message(GeminiAIStates.waiting_for_api_key)
async def process_api_key_wrong(message: types.Message):
    try: await message.delete()
    except Exception: pass
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API –∫–ª—é—á —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ /cancel.", reply_markup=cancel_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
@router.message(Command("cancel"), StateFilter(GeminiAIStates.waiting_for_api_key))
async def cancel_key_handler(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –∫–ª—é—á–∞ Gemini.")
    await state.clear()
    await message.answer("–í–≤–æ–¥ –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ sys_conf, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å
    # await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove()) # –ü—Ä–∏–º–µ—Ä


# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–¥—É–ª—è ---
def setup(kernel_data: dict):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è GeminiAI."""
    global CONTEXT_PATH
    base_dir = kernel_data.get("base_dir", ".")
    CONTEXT_PATH = os.path.join(base_dir, "data", "swiftdevbot_context.txt")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è cryptography
    if not CRYPTOGRAPHY_AVAILABLE:
        logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'cryptography' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ú–æ–¥—É–ª—å GeminiAI –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª—é—á–∞–º–∏ API.")
        # –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä, –µ—Å–ª–∏ –Ω–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    log_dir = os.path.join(base_dir, "data"); os.makedirs(log_dir, exist_ok=True)
    module_log_path = os.path.join(log_dir, "gemini_ai.log")
    try:
        # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö
        if not any(isinstance(h, RotatingFileHandler) and h.baseFilename == module_log_path for h in logger.handlers):
            log_handler = RotatingFileHandler(module_log_path, maxBytes=5*1024*1024, backupCount=3, encoding="utf-8")
            log_handler.setLevel(logging.INFO); log_formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s"); log_handler.setFormatter(log_formatter)
            logger.addHandler(log_handler)
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–æ–≥-—Ñ–∞–π–ª: {module_log_path}")
    except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä: {e}")

    dp = kernel_data.get("dp")
    if not dp: logger.critical("‚ùå –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return

    asyncio.create_task(init_db(kernel_data), name="gemini_ai_db_init")
    dp.include_router(router)
    logger.info("üõ† –ú–æ–¥—É–ª—å GeminiAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

def get_commands() -> list[dict]:
    """–ö–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è."""
    return [
        {"command": "mode", "description": "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò", "admin": False, "icon": "ü§ñ"},
        {"command": "clearcache", "description": "–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ò–ò", "admin": True, "icon": "üßπ"}
    ]

def get_settings(kernel_data: dict) -> tuple[str, Optional[InlineKeyboardMarkup]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –¥–ª—è /sysconf."""
    key_status = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    key_comment = "–ö–ª—é—á API –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."
    if not CRYPTOGRAPHY_AVAILABLE:
         key_status = "‚ö†Ô∏è –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!"
         key_comment = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É `cryptography`."
    elif not kernel_data.get("encryption_key"):
         key_status = "‚ö†Ô∏è –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
         key_comment = "–î–æ–±–∞–≤—å—Ç–µ `ENCRYPTION_KEY` –≤ `.env` –±–æ—Ç–∞."
    else:
        encrypted_key = kernel_data.get("config", {}).get("module_secrets", {}).get("gemini_ai")
        if encrypted_key:
            key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω)"
            key_comment = "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á."
        else:
            key_comment += " –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."

    text = (
        f"ü§ñ **–ú–æ–¥—É–ª—å GeminiAI**\n"
        f"–°—Ç–∞—Ç—É—Å API-–∫–ª—é—á–∞: {key_status}\n\n"
        f"{key_comment}\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/mode`."
    )
    # –ö–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
    keyboard = None
    if CRYPTOGRAPHY_AVAILABLE and kernel_data.get("encryption_key"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á", callback_data="gemini:set_key")]
        ])
    return text, keyboard

async def on_startup(bot: Bot, data: dict):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ API –∫–ª—é—á–∞
    if not CRYPTOGRAPHY_AVAILABLE:
         logger.error("‚ùå Cryptography –Ω–µ –Ω–∞–π–¥–µ–Ω. GeminiAI –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∫–ª—é—á.")
    elif not data.get("encryption_key"):
         logger.warning("‚ö†Ô∏è –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. GeminiAI –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∫–ª—é—á.")
    elif not _get_decrypted_key(data): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∏ –¥–µ—à–∏—Ñ—Ä—É–µ—Ç—Å—è –ª–∏ –∫–ª—é—á
         logger.warning("‚ö†Ô∏è API –∫–ª—é—á Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω!")
         # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
         admin_ids = data.get("admin_ids", [])
         msg = "‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è **GeminiAI** –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ `/sysconf`."
         tasks = [bot.send_message(aid, msg, parse_mode="Markdown") for aid in admin_ids]
         await asyncio.gather(*tasks, return_exceptions=True)
    else:
        logger.info("üöÄ –ú–æ–¥—É–ª—å GeminiAI –∑–∞–ø—É—â–µ–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º API –∫–ª—é—á–æ–º.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ black –æ—Å—Ç–∞–µ—Ç—Å—è
    if not BLACK_AVAILABLE:
        logger.warning("‚ö†Ô∏è black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. /format –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ black (–º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞)


async def on_shutdown(bot: Bot, data: dict):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
    logger.info("üì¥ –ú–æ–¥—É–ª—å GeminiAI –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")