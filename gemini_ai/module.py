from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import logging
import os
from datetime import datetime
import asyncio
from dotenv import load_dotenv

router = Router()
logger = logging.getLogger("modules.gemini_ai")
data = None
GEMINI_KEY = None

def setup(d):
    global data, DB_PATH, CONTEXT_PATH, GEMINI_KEY
    dp = d["dp"]
    data = d
    DB_PATH = os.path.join(data["base_dir"], "data", "cache.db")
    CONTEXT_PATH = os.path.join(data["base_dir"], "data", "swiftdevbot_context.txt")
    env_path = os.path.join(data["base_dir"], ".env")
    load_dotenv(env_path)
    GEMINI_KEY = os.getenv("GEMINI_KEY")
    if not GEMINI_KEY:
        logger.error("GEMINI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        raise ValueError("GEMINI_KEY must be set in .env")
    dp.include_router(router)
    asyncio.create_task(init_db())
    logger.info("üõ† –ú–æ–¥—É–ª—å GeminiAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def get_commands():
    return [
        types.BotCommand(command="/mode", description="ü§ñ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò (formal, friendly, sarcastic)"),
        types.BotCommand(command="/clearcache", description="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–∞–¥–º–∏–Ω)")
    ]

async def init_db():
    if not os.path.exists(os.path.dirname(DB_PATH)):
        os.makedirs(os.path.dirname(DB_PATH))
    async with data["db"] as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS cache 
                            (question TEXT PRIMARY KEY, answer TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS conversations 
                            (chat_id INTEGER, question TEXT, answer TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS settings 
                            (chat_id INTEGER PRIMARY KEY, mode TEXT DEFAULT 'friendly')''')
        await db.execute('''CREATE TABLE IF NOT EXISTS rate_limit 
                            (chat_id INTEGER PRIMARY KEY, last_request TIMESTAMP)''')
        await db.commit()
    logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

def get_reply_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="ask_again")]
    ])
    return keyboard

async def ask_gemini(question, chat_id):
    async with data["db"] as db:
        cursor = await db.execute("SELECT answer FROM cache WHERE question = ?", (question,))
        cached = await cursor.fetchone()
        if cached:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è: {question}")
            return cached[0]

        cursor = await db.execute("SELECT mode FROM settings WHERE chat_id = ?", (chat_id,))
        mode_result = await cursor.fetchone()
        mode = mode_result[0] if mode_result else "friendly"

        cursor = await db.execute("SELECT question, answer FROM conversations WHERE chat_id = ? ORDER BY timestamp DESC LIMIT 5", (chat_id,))
        history = await cursor.fetchall()
        context = "\n".join([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {q}\n–ò–ò: {a}" for q, a in reversed(history)]) if history else ""

        try:
            with open(CONTEXT_PATH, "r", encoding="utf-8") as f:
                project_context = f.read()
        except FileNotFoundError:
            project_context = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ SwiftDevBot –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è."
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ {CONTEXT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        mode_prompts = {
            "formal": "–û—Ç–≤–µ—á–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.",
            "friendly": "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ.",
            "sarcastic": "–û—Ç–≤–µ—á–∞–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ —é–º–æ—Ä–æ–º."
        }
        prompt = f"{project_context}\n\n–¢—ã - —Ä—É—Å—Å–∫–∏–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. {mode_prompts[mode]} –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}"

        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_KEY}"
        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": 0.9,
                "topK": 1,
                "topP": 1,
                "maxOutputTokens": 2048,
                "stopSequences": []
            },
            "safetySettings": [
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"}
            ]
        }
        max_retries = 3
        for attempt in range(max_retries):
            try:
                async with aiohttp.ClientSession() as session:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {question}")
                    async with session.post(url, json=payload) as response:
                        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {response.status}")
                        if response.status == 200:
                            result = await response.json()
                            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini: {result}")
                            if "candidates" in result and result["candidates"]:
                                answer = result["candidates"][0]["content"]["parts"][0]["text"]
                                full_answer = f"ü§ñ **–û—Ç–≤–µ—Ç –ò–ò:**\n\n{answer}"
                                await db.execute("INSERT OR REPLACE INTO cache (question, answer) VALUES (?, ?)", (question, full_answer))
                                await db.execute("INSERT INTO conversations (chat_id, question, answer) VALUES (?, ?, ?)", (chat_id, question, full_answer))
                                await db.commit()
                                return full_answer
                            return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ò–ò –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
                        elif response.status == 503:
                            error_text = await response.text()
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status} - {error_text}")
                            if attempt < max_retries - 1:
                                await asyncio.sleep(2)
                                continue
                            return "‚ùå –°–µ—Ä–≤–µ—Ä –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
                        else:
                            error_text = await response.text()
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç Gemini: {response.status} - {error_text}")
                            return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    continue
                return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

@router.message(lambda message: not message.text.startswith('/') and len(message.text) >= 3 and message.chat.type == "private")
async def handle_message(message: types.Message):
    async with data["db"] as db:
        cursor = await db.execute("SELECT last_request FROM rate_limit WHERE chat_id = ?", (message.chat.id,))
        last = await cursor.fetchone()
        if last and (datetime.now() - datetime.fromisoformat(last[0])).total_seconds() < 5:
            await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥.")
            return
        question = message.text
        answer = await ask_gemini(question, message.chat.id)
        await message.answer(answer, reply_markup=get_reply_keyboard())
        await db.execute("INSERT OR REPLACE INTO rate_limit (chat_id, last_request) VALUES (?, ?)", 
                         (message.chat.id, datetime.now().isoformat()))
        await db.commit()
    logger.info(f"ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {question}")

@router.callback_query(lambda c: c.data == "ask_again")
async def ask_again_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!", reply_markup=None)
    await callback.answer()

@router.message(Command("mode"))
async def mode_command(message: types.Message):
    if not message.text.split(maxsplit=1)[1:]:
        await message.answer("–£–∫–∞–∂–∏ —Ä–µ–∂–∏–º: /mode formal, /mode friendly, /mode sarcastic")
        return
    mode = message.text.split(maxsplit=1)[1].lower()
    if mode not in ["formal", "friendly", "sarcastic"]:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: formal, friendly, sarcastic")
        return
    async with data["db"] as db:
        await db.execute("INSERT OR REPLACE INTO settings (chat_id, mode) VALUES (?, ?)", (message.chat.id, mode))
        await db.commit()
    await message.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {mode}")
    logger.info(f"–†–µ–∂–∏–º –¥–ª—è {message.from_user.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {mode}")

@router.message(Command("clearcache"))
async def clear_cache_command(message: types.Message):
    if message.from_user.id not in data["admin_ids"]:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return
    async with data["db"] as db:
        await db.execute("DELETE FROM cache WHERE timestamp < datetime('now', '-7 days')")
        deleted = db.total_changes
        await db.commit()
    await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞.")
    logger.info(f"–ö—ç—à –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}, —É–¥–∞–ª–µ–Ω–æ {deleted} –∑–∞–ø–∏—Å–µ–π")

async def on_startup(d):
    logger.info("üöÄ –ú–æ–¥—É–ª—å GeminiAI –∑–∞–ø—É—â–µ–Ω.")

async def on_shutdown(d):
    logger.info("üì¥ –ú–æ–¥—É–ª—å GeminiAI –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
