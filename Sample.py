# ./modules/<module_name>/module.py
import os
import json
import logging
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —è–¥—Ä–∞
_kernel_data = None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
class ModuleStates(StatesGroup):
    waiting_for_input = State()

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
DISPLAY_NAME = "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
DESCRIPTION = "–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π."
GLOBAL_PARAMETERS = {  # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    "example_global_param": {
        "description": "–ü—Ä–∏–º–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞",
        "required": False,
        "default": "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    }
}
USER_PARAMETERS = {  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "example_user_param": {
        "description": "–ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞",
        "required": False,
        "default": "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    }
}

def setup(kernel_data):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."""
    global _kernel_data
    _kernel_data = kernel_data
    dp = kernel_data["dp"]
    base_dir = kernel_data["base_dir"]
    dp.include_router(router)
    
    db = kernel_data.get("db")
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ kernel_data['db']!")
        raise ValueError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    asyncio.create_task(init_db(db))
    init_config(base_dir)
    
    logger.info(f"–ú–æ–¥—É–ª—å {DISPLAY_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

async def init_db(db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    module_name = __name__.split(".")[-2]  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è
    table_name = f"{module_name}_config"
    try:
        async with db.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'") as cursor:
            if not await cursor.fetchone():
                await db.execute(f"""
                    CREATE TABLE {table_name} (
                        user_id INTEGER PRIMARY KEY,
                        example_user_param TEXT
                    )
                """)
                await db.commit()
                logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def init_config(base_dir):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è."""
    module_name = __name__.split(".")[-2]
    config_path = os.path.join(base_dir, "modules", module_name, "config.json")
    try:
        if not os.path.exists(config_path):
            os.makedirs(os.path.dirname(config_path), exist_ok=True)
            default_config = {key: info["default"] for key, info in GLOBAL_PARAMETERS.items()}
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump(default_config, f, indent=4)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.json: {config_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise

def load_config(base_dir):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è."""
    module_name = __name__.split(".")[-2]
    config_path = os.path.join(base_dir, "modules", module_name, "config.json")
    try:
        if os.path.exists(config_path):
            with open(config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        return {key: info["default"] for key, info in GLOBAL_PARAMETERS.items()}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {key: info["default"] for key, info in GLOBAL_PARAMETERS.items()}

async def get_user_config(db, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return {}
    module_name = __name__.split(".")[-2]
    table_name = f"{module_name}_config"
    try:
        async with db.execute(f"SELECT example_user_param FROM {table_name} WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {"example_user_param": row[0]}
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}

async def set_user_config(db, user_id, config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    module_name = __name__.split(".")[-2]
    table_name = f"{module_name}_config"
    try:
        if config is None:
            await db.execute(f"DELETE FROM {table_name} WHERE user_id = ?", (user_id,))
        else:
            param = config.get("example_user_param", USER_PARAMETERS["example_user_param"]["default"])
            await db.execute(
                f"INSERT OR REPLACE INTO {table_name} (user_id, example_user_param) VALUES (?, ?)",
                (user_id, param)
            )
        await db.commit()
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {config}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise

async def get_settings_menu(user_id, is_enabled, admin_ids, kernel_data):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è."""
    module_name = __name__.split(".")[-2]
    text = (f"üìã **{DISPLAY_NAME}** ({'üü¢ –í–∫–ª' if is_enabled else 'üî¥ –í—ã–∫–ª'})\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {DESCRIPTION}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n")
    
    keyboard = []
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id in admin_ids:
        global_config = load_config(kernel_data["base_dir"])
        for param, info in GLOBAL_PARAMETERS.items():
            value = global_config.get(param, info["default"])
            text += f"üîß {info['description']}: **{value}**\n"
        text += "\n"
        for param in GLOBAL_PARAMETERS:
            keyboard.append([types.InlineKeyboardButton(
                text=f"üîß –ò–∑–º–µ–Ω–∏—Ç—å {param}",
                callback_data=f"set_global_{module_name}_{param}"
            )])
        keyboard.append([types.InlineKeyboardButton(
            text=f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if is_enabled else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'}",
            callback_data=f"toggle_{module_name}"
        )])
        keyboard.append([types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
            callback_data=f"delete_module_{module_name}"
        )])

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_config = await get_user_config(kernel_data["db"], user_id)
    for param, info in USER_PARAMETERS.items():
        value = user_config.get(param, info["default"])
        text += f"üë§ {info['description']}: **{value}**\n"
    for param in USER_PARAMETERS:
        keyboard.append([types.InlineKeyboardButton(
            text=f"üë§ –ò–∑–º–µ–Ω–∏—Ç—å {param}",
            callback_data=f"set_user_{module_name}_{param}"
        )])
    if user_config:
        keyboard.append([types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data=f"delete_config_{module_name}"
        )])
    
    keyboard.append([types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="list_modules"
    )])
    
    return text, keyboard

@router.message(Command("command_name"))
async def command_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è."""
    if _kernel_data is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    
    db = _kernel_data.get("db")
    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    
    args = message.text.replace("/command_name", "").strip()
    if args:
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏: {args}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
        await state.set_state(ModuleStates.waiting_for_input)

@router.message(ModuleStates.waiting_for_input)
async def process_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    input_data = message.text.strip()
    if not input_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        return
    
    await message.answer(f"–ü–æ–ª—É—á–µ–Ω–æ: {input_data}")
    await state.clear()

def get_commands():
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è."""
    return [
        {"command": types.BotCommand(command="/command_name", description="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"), "access": "all"}
    ]

async def on_startup(kernel_data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è."""
    logger.info(f"–ú–æ–¥—É–ª—å {DISPLAY_NAME} –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(kernel_data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
    logger.info(f"–ú–æ–¥—É–ª—å {DISPLAY_NAME} –∑–∞–≤–µ—Ä—à—ë–Ω")
