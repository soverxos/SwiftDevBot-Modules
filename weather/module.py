"""
–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥—ã –¥–ª—è SwiftDevBot
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –º–∏—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫—É –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

[–í–ê–ñ–ù–û] –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º API-–∫–ª—é—á OpenWeatherMap (–ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ https://openweathermap.org)
"""
import os
import json
import logging
import asyncio
import aiohttp
import time
from datetime import datetime, timedelta
from io import BytesIO
import matplotlib.pyplot as plt
from typing import Optional, Dict, Any, List, Tuple
from aiogram import types, Dispatcher
from aiogram.filters import Command, Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
# [–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û] –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(f"modules.weather")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–¥—É–ª—è ---
# [–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û] –≠—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
MODULE_NAME = "weather"
DISPLAY_NAME = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"
VERSION = "1.0.0"
# [–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û] –≠—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
MODULE_ICON = "üå§Ô∏è"
kernel_data = None

# --- API –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
BASE_URL = "https://api.openweathermap.org/data/2.5"
DEFAULT_API_KEY = ""  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://openweathermap.org
GEOCODING_URL = "http://api.openweathermap.org/geo/1.0/direct"
ONECALL_URL = "https://api.openweathermap.org/data/3.0/onecall"
ICON_URL = "http://openweathermap.org/img/wn/{icon}@2x.png"

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π ---
# [–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª—è
MODULE_DATA_DIR = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ install()
CONFIG_FILENAME = "config.json"
PLOTS_DIR = None  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
# [–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    "api_key": {
        "type": "string",
        "default": DEFAULT_API_KEY,
        "description": "API –∫–ª—é—á OpenWeatherMap",
        "required": True
    },
    "units": {
        "type": "choice",
        "options": ["metric", "imperial"],
        "default": "metric",
        "description": "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è (metric - ¬∞C, –∫–º/—á; imperial - ¬∞F, –º–∏–ª—å/—á)"
    },
    "time_format": {
        "type": "choice", 
        "options": ["12h", "24h"], 
        "default": "24h",
        "description": "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (12/24 —á–∞—Å–∞)"
    },
    "language": {
        "type": "choice",
        "options": ["ru", "en", "de", "fr", "es"],
        "default": "ru",
        "description": "–Ø–∑—ã–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"
    },
    "forecast_days": {
        "type": "int",
        "default": 5,
        "min": 1,
        "max": 7,
        "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞"
    },
    "notifications_enabled": {
        "type": "bool",
        "default": False,
        "description": "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ"
    },
    "notification_time": {
        "type": "string",
        "default": "08:00",
        "description": "–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç HH:MM)"
    }
}

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
def get_module_settings():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    if not kernel_data:
        return {k: v.get("default") if isinstance(v, dict) else v for k, v in DEFAULT_SETTINGS.items()}
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞
    settings = kernel_data.get("config", {}).get("modules_settings", {}).get(MODULE_NAME, {})
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    result = {}
    for key, value in DEFAULT_SETTINGS.items():
        if isinstance(value, dict) and "default" in value:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if key in settings:
                result[key] = settings[key]
            else:
                result[key] = value["default"]
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            result[key] = settings.get(key, value)
    
    return result

# --- –†–∞–±–æ—Ç–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º ---
def get_local_config_path():
    if not MODULE_DATA_DIR:
        return None
    return os.path.join(MODULE_DATA_DIR, CONFIG_FILENAME)

def load_local_config():
    config_path = get_local_config_path()
    if not config_path or not os.path.exists(config_path):
        return {}
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return {}

def save_local_config(config_data):
    if not MODULE_DATA_DIR:
        logger.error("‚ùå MODULE_DATA_DIR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
        return False
    
    os.makedirs(MODULE_DATA_DIR, exist_ok=True)
    config_path = get_local_config_path()
    
    try:
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return False

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
async def get_user_city(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config = load_local_config()
    try:
        return config.get("user_preferences", {}).get(str(user_id), {}).get("default_city", "–ú–æ—Å–∫–≤–∞")
    except Exception:
        return "–ú–æ—Å–∫–≤–∞"

async def set_user_city(user_id: int, city: str) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config = load_local_config()
    
    if "user_preferences" not in config:
        config["user_preferences"] = {}
    
    if str(user_id) not in config["user_preferences"]:
        config["user_preferences"][str(user_id)] = {}
    
    config["user_preferences"][str(user_id)]["default_city"] = city
    config["user_preferences"][str(user_id)]["updated_at"] = str(datetime.now())
    
    return save_local_config(config)

async def get_favorite_cities(user_id: int) -> List[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    config = load_local_config()
    try:
        return config.get("user_preferences", {}).get(str(user_id), {}).get("favorite_cities", [])
    except Exception:
        return []

async def add_favorite_city(user_id: int, city: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    config = load_local_config()
    
    if "user_preferences" not in config:
        config["user_preferences"] = {}
    
    if str(user_id) not in config["user_preferences"]:
        config["user_preferences"][str(user_id)] = {}
    
    if "favorite_cities" not in config["user_preferences"][str(user_id)]:
        config["user_preferences"][str(user_id)]["favorite_cities"] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥
    favorite_cities = config["user_preferences"][str(user_id)]["favorite_cities"]
    if city not in favorite_cities:
        favorite_cities.append(city)
    
    return save_local_config(config)

async def remove_favorite_city(user_id: int, city: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    config = load_local_config()
    try:
        if city in config["user_preferences"][str(user_id)]["favorite_cities"]:
            config["user_preferences"][str(user_id)]["favorite_cities"].remove(city)
            return save_local_config(config)
    except Exception:
        pass
    return False

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
CACHE = {}
CACHE_LIFETIME = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def get_cache_key(city: str, forecast_type: str = "current") -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è –∫—ç—à–∞"""
    return f"{city.lower()}:{forecast_type}"

def get_cached_weather(city: str, forecast_type: str = "current") -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞"""
    key = get_cache_key(city, forecast_type)
    if key in CACHE:
        cached_data = CACHE[key]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
        if time.time() - cached_data["timestamp"] < CACHE_LIFETIME:
            return cached_data["data"]
    return None

def set_cached_weather(city: str, data: Dict, forecast_type: str = "current") -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ –∫—ç—à"""
    key = get_cache_key(city, forecast_type)
    CACHE[key] = {
        "data": data,
        "timestamp": time.time()
    }

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class WeatherStates(StatesGroup):
    main = State()           # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    settings = State()       # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ 
    city_input = State()     # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    favorites = State()      # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    detailed = State()       # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    edit_setting = State()   # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ---
LANGUAGES = {
    "ru": {
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {name} v{version}!",
        "city_prompt": "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã",
        "loading": "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}...",
        "error": "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {error}",
        "current_weather": "üå§Ô∏è <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}</b>",
        "forecast": "üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è {city}</b>",
        "not_found": "üîç –ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
        "favorites_empty": "üîñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤",
        "favorites_title": "üîñ <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</b>",
        "city_added": "‚úÖ –ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
        "city_removed": "‚ùå –ì–æ—Ä–æ–¥ {city} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
        "city_default": "‚úÖ –ì–æ—Ä–æ–¥ {city} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "settings_title": "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã</b>",
        "disabled": "‚õî –ú–æ–¥—É–ª—å {name} –æ—Ç–∫–ª—é—á—ë–Ω.",
        "no_access": "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {name}."
    },
    "en": {
        "welcome": "Welcome to {name} v{version}!",
        "city_prompt": "üèôÔ∏è Enter city name for weather forecast",
        "loading": "‚è≥ Loading weather forecast for {city}...",
        "error": "‚ùå Forecast error: {error}",
        "current_weather": "üå§Ô∏è <b>Current weather in {city}</b>",
        "forecast": "üìÖ <b>{days}-day forecast for {city}</b>",
        "not_found": "üîç City {city} not found. Try another city.",
        "favorites_empty": "üîñ You don't have favorite cities yet",
        "favorites_title": "üîñ <b>Favorite Cities</b>",
        "city_added": "‚úÖ {city} added to favorites",
        "city_removed": "‚ùå {city} removed from favorites",
        "city_default": "‚úÖ {city} set as default city",
        "settings_title": "‚öôÔ∏è <b>Weather Forecast Settings</b>",
        "disabled": "‚õî {name} module is disabled.",
        "no_access": "‚õî You don't have access to {name}."
    }
}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_text(key: str, lang: str = "ru", **kwargs) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = LANGUAGES.get(lang, LANGUAGES["ru"]).get(key, key).format(name=DISPLAY_NAME, version=VERSION, **kwargs)
    return text

def get_main_menu_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–¥—É–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥", callback_data="search_city")],
        [InlineKeyboardButton(text="üîñ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞", callback_data="favorites")],
        [InlineKeyboardButton(text="üìà –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="detailed_forecast")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])

def get_forecast_kb(city: str, is_favorite: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    favorite_btn = InlineKeyboardButton(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favorite else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", 
        callback_data=f"remove_favorite:{city}" if is_favorite else f"add_favorite:{city}"
    )
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [favorite_btn],
        [InlineKeyboardButton(text="üìå –°–¥–µ–ª–∞—Ç—å –≥–æ—Ä–æ–¥–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data=f"set_default:{city}")],
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π", callback_data=f"forecast:{city}")],
        [InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", callback_data=f"temp_chart:{city}")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_favorites_kb(cities: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏"""
    keyboard = []
    for city in cities:
        keyboard.append([InlineKeyboardButton(text=f"üèôÔ∏è {city}", callback_data=f"get_weather:{city}")])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_settings_kb() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings = get_module_settings()
    keyboard = []
    
    for key, value in settings.items():
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ api_key (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á)
        if key == "api_key":
            api_key = value
            display_value = f"{api_key[:5]}..." if api_key and len(api_key) > 5 else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            keyboard.append([
                InlineKeyboardButton(text=f"üîë API –∫–ª—é—á: {display_value}", callback_data=f"edit_setting:{key}")
            ])
        else:
            display_value = value
            keyboard.append([
                InlineKeyboardButton(text=f"{key}: {display_value}", callback_data=f"edit_setting:{key}")
            ])
    
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def is_module_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á—ë–Ω –ª–∏ –º–æ–¥—É–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    return kernel_data["config"]["modules"].get(MODULE_NAME, False)

def check_permissions(user_id: int, admin_only: bool = False) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø."""
    if admin_only:
        return user_id in kernel_data.get("admin_ids", [])
    return True  # –ï—Å–ª–∏ admin_only=False, –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å —É –≤—Å–µ—Ö

async def update_stats(action: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    db = kernel_data.get("db")
    if db:
        await db.execute(
            "INSERT INTO module_stats (module, action, uses) VALUES (?, ?, 1) "
            "ON CONFLICT(module, action) DO UPDATE SET uses=uses+1",
            (MODULE_NAME, action)
        )
        await db.commit()

# --- API –∏ –ø–æ–≥–æ–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def fetch_weather_data(url: str, params: Dict) -> Dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}, {await response.text()}")
                    return {"error": f"–û—à–∏–±–∫–∞ API: {response.status}"}
                
                return await response.json()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"}

async def get_city_coordinates(city_name: str, api_key: str) -> Optional[Tuple[float, float, str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    params = {
        "q": city_name,
        "limit": 1,
        "appid": api_key
    }
    
    data = await fetch_weather_data(GEOCODING_URL, params)
    
    if data and isinstance(data, list) and len(data) > 0:
        city = data[0]
        return city.get("lat"), city.get("lon"), city.get("name", city_name)
    
    return None

async def get_current_weather(city: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_data = get_cached_weather(city, "current")
    if cached_data:
        return cached_data
    
    settings = get_module_settings()
    api_key = settings["api_key"]
    units = settings["units"]
    lang = settings["language"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
    coords = await get_city_coordinates(city, api_key)
    
    if not coords:
        return {"error": f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    lat, lon, city_name = coords
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "lat": lat,
        "lon": lon,
        "appid": api_key,
        "units": units,
        "lang": lang,
        "exclude": "minutely,hourly"  # –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
    
    data = await fetch_weather_data(ONECALL_URL, params)
    
    if "error" in data:
        return data
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã–µ
    data["city_name"] = city_name
    
    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    set_cached_weather(city, data, "current")
    
    return data

async def generate_temperature_chart(city: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    weather_data = await get_current_weather(city)
    
    if "error" in weather_data:
        return None
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    
    dates = []
    temps_day = []
    temps_night = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for day in weather_data.get("daily", [])[:7]:  # –ù–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
        dt = datetime.fromtimestamp(day.get("dt", 0))
        dates.append(dt.strftime("%d.%m"))
        temps_day.append(day.get("temp", {}).get("day", 0))
        temps_night.append(day.get("temp", {}).get("night", 0))
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.plot(dates, temps_day, 'o-', color='orange', label='–î–µ–Ω—å')
    plt.plot(dates, temps_night, 'o-', color='blue', label='–ù–æ—á—å')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.title(f"–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è {city}")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.makedirs(PLOTS_DIR, exist_ok=True)
    timestamp = int(time.time())
    filename = os.path.join(PLOTS_DIR, f"temp_chart_{city}_{timestamp}.png")
    
    plt.savefig(filename)
    plt.close()
    
    return filename

def format_weather_message(weather_data: Dict, forecast_type: str = "current") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ"""
    if "error" in weather_data:
        return f"‚ùå –û—à–∏–±–∫–∞: {weather_data['error']}"
    
    settings = get_module_settings()
    units = settings["units"]
    lang = settings["language"]
    
    city_name = weather_data.get("city_name", "")
    current = weather_data.get("current", {})
    daily = weather_data.get("daily", [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    temp_unit = "¬∞C" if units == "metric" else "¬∞F"
    speed_unit = "–º/—Å" if units == "metric" else "–º–∏–ª—å/—á"
    
    if forecast_type == "current":
        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        temp = current.get("temp", 0)
        feels_like = current.get("feels_like", 0)
        humidity = current.get("humidity", 0)
        pressure = current.get("pressure", 0)
        wind_speed = current.get("wind_speed", 0)
        description = current.get("weather", [{}])[0].get("description", "")
        
        message = (
            f"üå§Ô∏è <b>–ü–æ–≥–æ–¥–∞ –≤ {city_name}</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}{temp_unit} (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}{temp_unit})\n"
            f"‚òÅÔ∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {description}\n"
            f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}%\n"
            f"üå¨Ô∏è <b>–í–µ—Ç–µ—Ä:</b> {wind_speed} {speed_unit}\n"
            f"üîµ <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {pressure} –≥–ü–∞\n"
            f"üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        )
        
    elif forecast_type == "forecast":
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        message = f"üìÖ <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}</b>\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        
        for day_data in daily[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –¥–Ω—è–º–∏
            dt = datetime.fromtimestamp(day_data.get("dt", 0))
            day_name = dt.strftime("%A").capitalize()
            date_str = dt.strftime("%d.%m")
            
            day_temp = day_data.get("temp", {}).get("day", 0)
            night_temp = day_data.get("temp", {}).get("night", 0)
            description = day_data.get("weather", [{}])[0].get("description", "")
            
            message += (
                f"\n<b>{day_name} ({date_str}):</b>\n"
                f"  üå°Ô∏è –î–Ω—ë–º: {day_temp}{temp_unit}, –ù–æ—á—å—é: {night_temp}{temp_unit}\n"
                f"  ‚òÅÔ∏è {description}\n"
            )
    
    return message

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def weather_command(message: types.Message, state: FSMContext, kernel_data: Dict[str, Any]) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–¥—É–ª—è. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç /weather.
    """
    if not is_module_enabled():
        logger.info(f"‚õî –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –æ—Ç–∫–ª—é—á—ë–Ω")
        await message.answer(get_text("disabled"))
        return
    
    if not check_permissions(message.from_user.id):
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ /{MODULE_NAME} –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {message.from_user.id}")
        await message.answer(get_text("no_access"))
        return
    
    logger.info(f"üìå –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /{MODULE_NAME} –¥–ª—è {message.from_user.id}")
    await update_stats("command_used")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_module_settings()
    if not settings["api_key"]:
        await message.answer(
            f"{MODULE_ICON} <b>API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n"
            f"–î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á OpenWeatherMap.\n"
            f"–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ https://openweathermap.org –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ.",
            reply_markup=get_settings_kb(),
            parse_mode="HTML"
        )
        await state.set_state(WeatherStates.settings)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"{MODULE_ICON} {get_text('welcome')}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
        reply_markup=get_main_menu_kb(),
        parse_mode="HTML"
    )
    
    await state.set_state(WeatherStates.main)

async def process_weather_message(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞"""
    user_id = message.from_user.id
    city = message.text.strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await message.answer(get_text("loading", city=city))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
    weather_data = await get_current_weather(city)
    
    if "error" in weather_data:
        await loading_message.edit_text(get_text("not_found", city=city))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    favorite_cities = await get_favorite_cities(user_id)
    is_favorite = city in favorite_cities
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ
    weather_message = format_weather_message(weather_data, "current")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π
    await loading_message.edit_text(
        weather_message,
        reply_markup=get_forecast_kb(city, is_favorite),
        parse_mode="HTML"
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
async def process_callback(callback: types.CallbackQuery, state: FSMContext, kernel_data: Dict[str, Any]) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    if not is_module_enabled():
        logger.info(f"‚õî –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –æ—Ç–∫–ª—é—á—ë–Ω")
        await callback.answer(get_text("disabled"), show_alert=True)
        return
    
    if not check_permissions(callback.from_user.id):
        logger.info(f"‚õî –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–±—ç–∫—É {callback.data} –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {callback.from_user.id}")
        await callback.answer(get_text("no_access"), show_alert=True)
        return
    
    user_id = callback.from_user.id
    data = callback.data
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞: {data} –æ—Ç {user_id}")
    await update_stats(f"callback_{data.split(':')[0]}")
    
    if data == "search_city":
        await callback.message.edit_text(
            get_text("city_prompt"),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.set_state(WeatherStates.city_input)
    
    elif data == "favorites":
        favorite_cities = await get_favorite_cities(user_id)
        
        if not favorite_cities:
            await callback.message.edit_text(
                get_text("favorites_empty"),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            await callback.message.edit_text(
                get_text("favorites_title"),
                reply_markup=get_favorites_kb(favorite_cities),
                parse_mode="HTML"
            )
        
        await state.set_state(WeatherStates.favorites)
    
    elif data == "detailed_forecast":
        default_city = await get_user_city(user_id)
        await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {default_city}...")
        
        weather_data = await get_current_weather(default_city)
        forecast_message = format_weather_message(weather_data, "forecast")
        
        await callback.message.edit_text(
            forecast_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
    
    elif data == "settings":
        await callback.message.edit_text(
            get_text("settings_title"),
            reply_markup=get_settings_kb(),
            parse_mode="HTML"
        )
        await state.set_state(WeatherStates.settings)
    
    elif data == "main_menu":
        await callback.message.edit_text(
            f"{MODULE_ICON} {get_text('welcome')}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            reply_markup=get_main_menu_kb(),
            parse_mode="HTML"
        )
        await state.set_state(WeatherStates.main)
    
    elif data.startswith("get_weather:"):
        city = data.split(":", 1)[1]
        await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è {city}...")
        
        weather_data = await get_current_weather(city)
        favorite_cities = await get_favorite_cities(user_id)
        is_favorite = city in favorite_cities
        
        weather_message = format_weather_message(weather_data, "current")
        
        await callback.message.edit_text(
            weather_message,
            reply_markup=get_forecast_kb(city, is_favorite),
            parse_mode="HTML"
        )
    
    elif data.startswith("add_favorite:"):
        city = data.split(":", 1)[1]
        await add_favorite_city(user_id, city)
        await callback.answer(get_text("city_added", city=city))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.edit_reply_markup(
            reply_markup=get_forecast_kb(city, True)
        )
    
    elif data.startswith("remove_favorite:"):
        city = data.split(":", 1)[1]
        await remove_favorite_city(user_id, city)
        await callback.answer(get_text("city_removed", city=city))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.edit_reply_markup(
            reply_markup=get_forecast_kb(city, False)
        )
    
    elif data.startswith("set_default:"):
        city = data.split(":", 1)[1]
        await set_user_city(user_id, city)
        await callback.answer(get_text("city_default", city=city))
    
    elif data.startswith("forecast:"):
        city = data.split(":", 1)[1]
        await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π...")
        
        weather_data = await get_current_weather(city)
        forecast_message = format_weather_message(weather_data, "forecast")
        
        await callback.message.edit_text(
            forecast_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"get_weather:{city}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
    
    elif data.startswith("temp_chart:"):
        city = data.split(":", 1)[1]
        await callback.answer("–°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä...")
        
        chart_path = await generate_temperature_chart(city)
        
        if chart_path:
            with open(chart_path, 'rb') as chart:
                await callback.message.answer_photo(
                    photo=types.BufferedInputFile(chart.read(), filename="temperature_chart.png"),
                    caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–ª—è {city} –Ω–∞ –Ω–µ–¥–µ–ª—é",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"get_weather:{city}")],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
        else:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    
    elif data.startswith("edit_setting:"):
        setting_key = data.split(":", 1)[1]
        settings = get_module_settings()
        current_value = settings.get(setting_key, "–ù–µ –∑–∞–¥–∞–Ω–æ")
        
        setting_info = DEFAULT_SETTINGS.get(setting_key, {})
        setting_description = setting_info.get("description", "") if isinstance(setting_info, dict) else ""
        
        await callback.message.edit_text(
            f"‚öôÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b> {setting_key}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {setting_description}\n"
            f"üîµ <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {current_value}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="settings")]
            ]),
            parse_mode="HTML"
        )
        
        await state.update_data(editing_setting=setting_key)
        await state.set_state(WeatherStates.edit_setting)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–±—ç–∫–∞
    if not data.startswith("get_weather:") and not data.startswith("temp_chart:"):
        await callback.answer()

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def weather_notification_task() -> None:
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ"""
    while True:
        try:
            settings = get_module_settings()
            if settings["notifications_enabled"]:
                # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_time = settings["notification_time"]
                hour, minute = map(int, notification_time.split(":"))
                
                # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                now = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if now.hour == hour and now.minute == minute:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                    config = load_local_config()
                    user_preferences = config.get("user_preferences", {})
                    
                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for user_id_str, prefs in user_preferences.items():
                        try:
                            user_id = int(user_id_str)
                            city = prefs.get("default_city", "–ú–æ—Å–∫–≤–∞")
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
                            weather_data = await get_current_weather(city)
                            
                            if "error" not in weather_data:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                weather_message = format_weather_message(weather_data, "current")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                await kernel_data["bot"].send_message(
                                    user_id,
                                    f"{MODULE_ICON} <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>\n\n{weather_message}",
                                    reply_markup=get_forecast_kb(city),
                                    parse_mode="HTML"
                                )
                                logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {user_id}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                    
                    # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    await asyncio.sleep(60)
                else:
                    # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    await asyncio.sleep(60)
            else:
                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
                await asyncio.sleep(3600)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await asyncio.sleep(300)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è ---
def register_module(dp: Dispatcher, data: Dict[str, Any]) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞"""
    global kernel_data
    kernel_data = data
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(weather_command, Command(commands=[MODULE_NAME]))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    from aiogram.filters import StateFilter
    dp.message.register(
        process_weather_message,
        StateFilter(WeatherStates.city_input) | StateFilter(WeatherStates.main)
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
    from aiogram.filters import Text
    module_callbacks = [
        "search_city", "favorites", "detailed_forecast", "settings", "main_menu"
    ]
    dp.callback_query.register(
        process_callback,
        Text(startswith=tuple(module_callbacks)) | 
        Text(startswith=("get_weather:", "add_favorite:", "remove_favorite:", 
                         "set_default:", "forecast:", "temp_chart:", "edit_setting:"))
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
    command_registry = kernel_data["command_registry"]
    command_registry.register_command(
        command=MODULE_NAME,
        description=f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
        icon=MODULE_ICON,
        category="Utility",
        admin=False
    )
    logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è ---
async def install(data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥—É–ª—è"""
    global kernel_data, MODULE_DATA_DIR, PLOTS_DIR
    kernel_data = data
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è
    MODULE_DATA_DIR = os.path.join(data["base_dir"], "data", MODULE_NAME)
    PLOTS_DIR = os.path.join(MODULE_DATA_DIR, "plots")
    
    os.makedirs(MODULE_DATA_DIR, exist_ok=True)
    os.makedirs(PLOTS_DIR, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    config_path = get_local_config_path()
    if not os.path.exists(config_path):
        default_local_config = {
            "version": VERSION,
            "last_update": str(datetime.now()),
            "user_preferences": {}
        }
        save_local_config(default_local_config)
    
    logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
    return DEFAULT_SETTINGS

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ---
async def on_shutdown(data: Dict[str, Any]) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    logger.info(f"üõë –ú–æ–¥—É–ª—å {DISPLAY_NAME} ({MODULE_NAME}) –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    CACHE.clear()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ---
def register_background_tasks(data: Dict[str, Any]) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ —è–¥—Ä–µ"""
    data["background_tasks"][MODULE_NAME] = [weather_notification_task]
    logger.info(f"üïí –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è {DISPLAY_NAME} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")