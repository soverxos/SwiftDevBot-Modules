import os
import json
import logging
import asyncio
import aiohttp
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è kernel_data
_kernel_data = None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class WeatherStates(StatesGroup):
    waiting_for_city = State()

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
DISPLAY_NAME = "–ü–æ–≥–æ–¥–∞/Weather üå¶Ô∏è"
DESCRIPTION = "–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —á–µ—Ä–µ–∑ OpenWeatherMap."
GLOBAL_PARAMETERS = {
    "api_key": {
        "description": "API –∫–ª—é—á –¥–ª—è OpenWeatherMap (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ openweathermap.org)",
        "required": True
    }
}
USER_PARAMETERS = {
    "city": {
        "description": "–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –•–∞—Ä—å–∫–æ–≤)",
        "required": False
    },
    "locality": {
        "description": "–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—ë–ª–æ–∫ –°–æ–ª–Ω–µ—á–Ω—ã–π)",
        "required": False
    }
}

def setup(kernel_data):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."""
    global _kernel_data
    _kernel_data = kernel_data
    db = kernel_data.get("db")
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ kernel_data['db'] –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ weather_module!")
        raise ValueError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    asyncio.create_task(init_db(db))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
    init_config(kernel_data["base_dir"])
    
    logger.info("–ú–æ–¥—É–ª—å weather_module —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

async def init_db(db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ weather_config
        async with db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='weather_config'") as cursor:
            if not await cursor.fetchone():
                await db.execute("""
                    CREATE TABLE weather_config (
                        user_id INTEGER PRIMARY KEY,
                        city TEXT,
                        locality TEXT
                    )
                """)
                await db.commit()
                logger.info("–¢–∞–±–ª–∏—Ü–∞ weather_config —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–ª—è–º–∏ user_id, city, locality")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ locality –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                async with db.execute("PRAGMA table_info(weather_config)") as cursor:
                    columns = [row[1] for row in await cursor.fetchall()]
                    if "locality" not in columns:
                        await db.execute("ALTER TABLE weather_config ADD COLUMN locality TEXT")
                        await db.commit()
                        logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü locality –≤ —Ç–∞–±–ª–∏—Ü—É weather_config")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è weather_module: {e}")
        raise
    
    logger.info("–¢–∞–±–ª–∏—Ü–∞ weather_config —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def init_config(base_dir):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è."""
    config_path = os.path.join(base_dir, "modules", "weather", "config.json")
    try:
        if not os.path.exists(config_path):
            os.makedirs(os.path.dirname(config_path), exist_ok=True)
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump({}, f, indent=4, ensure_ascii=False)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.json –¥–ª—è weather_module: {config_path}")
        else:
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è weather_module —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {config_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ weather_module: {e}")
        raise

def load_config(base_dir):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∏–∑ —Ñ–∞–π–ª–∞."""
    config_path = os.path.join(base_dir, "modules", "weather", "config.json")
    try:
        if os.path.exists(config_path):
            with open(config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ weather_module: {e}")
        return {}

async def get_user_config(db, user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_user_config!")
        return {}
    
    try:
        async with db.execute("SELECT city, locality FROM weather_config WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {"city": row[0], "locality": row[1]}
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è weather_module: {e}")
        return {}

async def set_user_config(db, user_id, config):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ set_user_config!")
        return
    
    try:
        if config is None:
            # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute("DELETE FROM weather_config WHERE user_id = ?", (user_id,))
        else:
            city = config.get("city")
            locality = config.get("locality")
            await db.execute(
                "INSERT OR REPLACE INTO weather_config (user_id, city, locality) VALUES (?, ?, ?)",
                (user_id, city, locality)
            )
        await db.commit()
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è weather_module –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {config}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è weather_module: {e}")
        raise

async def get_weather(city, api_key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API OpenWeatherMap."""
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city} (–∫–æ–¥ {response.status})"
                data = await response.json()
                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                description = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå¶Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city}:**\n"
                        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{temp}¬∞C**\n"
                        f"ü•µ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: **{feels_like}¬∞C**\n"
                        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: **{description}**\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: **{humidity}%**\n"
                        f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: **{wind_speed} –º/—Å**")
    except aiohttp.ClientError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é ({e})"
    except KeyError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API ({e})"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}"

async def get_settings_menu(user_id, is_enabled, admin_ids, kernel_data):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è."""
    text = (f"üìã **{DISPLAY_NAME}** ({'üü¢ –í–∫–ª' if is_enabled else 'üî¥ –í—ã–∫–ª'})\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {DESCRIPTION}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚öôÔ∏è **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n")
    
    keyboard = []
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in admin_ids:
        global_config = load_config(kernel_data["base_dir"])
        for param, info in GLOBAL_PARAMETERS.items():
            value = global_config.get(param, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            text += f"üîß {info['description']}: **{value}**\n"
        text += "\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    user_config = await get_user_config(kernel_data["db"], user_id)
    for param, info in USER_PARAMETERS.items():
        value = user_config.get(param) if user_config else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        text += f"üë§ {info['description']}: **{value}**\n"
    
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += "üõ† **–î–µ–π—Å—Ç–≤–∏—è:**\n"
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id in admin_ids:
        keyboard.append([types.InlineKeyboardButton(
            text=f"{'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' if is_enabled else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'}",
            callback_data="toggle_weather"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id in admin_ids:
        for param in GLOBAL_PARAMETERS:
            keyboard.append([types.InlineKeyboardButton(
                text=f"üîë –ò–∑–º–µ–Ω–∏—Ç—å {param}",
                callback_data=f"set_global_weather_{param}"
            )])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for param in USER_PARAMETERS:
        emoji = "üèôÔ∏è" if param == "city" else "üåç"  # –†–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è city –∏ locality
        keyboard.append([types.InlineKeyboardButton(
            text=f"{emoji} –ò–∑–º–µ–Ω–∏—Ç—å {param}",
            callback_data=f"set_user_weather_{param}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if user_config:
        keyboard.append([types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="delete_config_weather"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if user_id in admin_ids:
        keyboard.append([types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å",
            callback_data="delete_module_weather"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
    keyboard.append([types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="list_modules"
    )])
    
    return text, keyboard  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫, –±–µ–∑ InlineKeyboardMarkup

@router.message(Command("weather"))
async def weather_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    if _kernel_data is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    
    db = _kernel_data.get("db")
    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
    command_args = message.text.replace("/weather", "").strip()
    if command_args:
        city = command_args
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_config = await get_user_config(db, message.from_user.id)
        city = user_config.get("city")
        locality = user_config.get("locality")
        if locality:
            city = f"{city}, {locality}" if city else locality
        if not city:
            await message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:")
            await state.set_state(WeatherStates.waiting_for_city)
            return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(_kernel_data["base_dir"])
    api_key = config.get("api_key")
    if not api_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á –¥–ª—è OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    weather_info = await get_weather(city, api_key)
    await message.answer(weather_info, parse_mode="Markdown")
    logger.info(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

@router.message(WeatherStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    city = message.text.strip()
    if not city:
        await message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥:")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(_kernel_data["base_dir"])
    api_key = config.get("api_key")
    if not api_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á –¥–ª—è OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    db = _kernel_data.get("db")
    user_config = await get_user_config(db, message.from_user.id)
    was_city_empty = not user_config.get("city")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≥–æ—Ä–æ–¥ –ø—É—Å—Ç—ã–º –¥–æ —ç—Ç–æ–≥–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    user_config["city"] = city
    await set_user_config(db, message.from_user.id, user_config)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    weather_info = await get_weather(city, api_key)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if was_city_empty and not weather_info.startswith("‚ùå"):
        weather_info += f"\n\n‚úÖ –ì–æ—Ä–æ–¥ \"{city}\" —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    
    await message.answer(weather_info, parse_mode="Markdown")
    logger.info(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

def get_commands():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è."""
    return [
        {"command": types.BotCommand(command="/weather", description="üå¶Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ"), "access": "all"}
    ]

async def on_startup(kernel_data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è."""
    logger.info("–ú–æ–¥—É–ª—å weather_module –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(kernel_data):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è."""
    logger.info("–ú–æ–¥—É–ª—å weather_module –∑–∞–≤–µ—Ä—à—ë–Ω")
