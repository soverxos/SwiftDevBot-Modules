import os
import json
import logging
import aiosqlite
import asyncio
import aiohttp
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

router = Router()

_kernel_data = None

class WeatherStates(StatesGroup):
    waiting_for_city = State()

# –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
DISPLAY_NAME = "–ü–æ–≥–æ–¥–∞/Weather üå¶Ô∏è"
DESCRIPTION = "–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ —á–µ—Ä–µ–∑ OpenWeatherMap."
GLOBAL_PARAMETERS = {
    "api_key": {
        "description": "API –∫–ª—é—á –¥–ª—è OpenWeatherMap (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ openweathermap.org)",
        "required": True
    }
}
USER_PARAMETERS = {
    "city": {
        "description": "–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞)",
        "required": False
    }
}

def setup(kernel_data):
    global _kernel_data
    _kernel_data = kernel_data
    db = kernel_data.get("db")
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ kernel_data['db'] –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ weather_module!")
        return
    asyncio.create_task(init_db(db))
    init_config(kernel_data["base_dir"])
    kernel_data["logger"].info("–ú–æ–¥—É–ª—å weather_module –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

async def init_db(db):
    async with db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='weather_config'") as cursor:
        if not await cursor.fetchone():
            await db.execute("""
                CREATE TABLE weather_config (
                    user_id INTEGER PRIMARY KEY,
                    city TEXT
                )
            """)
            await db.commit()
    logger.info("–¢–∞–±–ª–∏—Ü–∞ weather_config –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def init_config(base_dir):
    config_path = os.path.join(base_dir, "modules", "weather", "config.json")
    if not os.path.exists(config_path):
        os.makedirs(os.path.dirname(config_path), exist_ok=True)
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump({}, f, indent=4, ensure_ascii=False)
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è weather_module –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {config_path}")

def load_config(base_dir):
    config_path = os.path.join(base_dir, "modules", "weather", "config.json")
    if os.path.exists(config_path):
        with open(config_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

async def get_user_config(db, user_id):
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_user_config!")
        return {}
    async with db.execute("SELECT city FROM weather_config WHERE user_id = ?", (user_id,)) as cursor:
        row = await cursor.fetchone()
        if row:
            return {"city": row[0]}
    return {}

async def set_user_config(db, user_id, config):
    if db is None:
        logger.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ set_user_config!")
        return
    if config is None:
        await db.execute("DELETE FROM weather_config WHERE user_id = ?", (user_id,))
    else:
        city = config.get("city")
        await db.execute("INSERT OR REPLACE INTO weather_config (user_id, city) VALUES (?, ?)", (user_id, city))
    await db.commit()

async def get_weather(city, api_key):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    return f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city} (–∫–æ–¥ {response.status})"
                data = await response.json()
                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                description = data["weather"][0]["description"]
                humidity = data["main"]["humidity"]
                wind_speed = data["wind"]["speed"]
                return (f"üå¶Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å")
    except aiohttp.ClientError as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é ({e})"
    except KeyError as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API ({e})"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}"

@router.message(Command("weather"))
async def weather_command(message: types.Message, state: FSMContext):
    if _kernel_data is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    
    db = _kernel_data.get("db")
    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    user_config = await get_user_config(db, message.from_user.id)
    city = user_config.get("city")
    
    if not city:
        await message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:")
        await state.set_state(WeatherStates.waiting_for_city)
        return
    
    config = load_config(_kernel_data["base_dir"])
    api_key = config.get("api_key")
    if not api_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    weather_info = await get_weather(city, api_key)
    await message.answer(weather_info)

@router.message(WeatherStates.waiting_for_city)
async def process_city_input(message: types.Message, state: FSMContext):
    if _kernel_data is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    
    city = message.text.strip()
    if not city:
        await message.answer("üèôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
        return
    
    db = _kernel_data.get("db")
    if db is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    await set_user_config(db, message.from_user.id, {"city": city})
    await state.clear()
    
    config = load_config(_kernel_data["base_dir"])
    api_key = config.get("api_key")
    if not api_key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    weather_info = await get_weather(city, api_key)
    await message.answer(weather_info)

def get_commands():
    return [
        {"command": types.BotCommand(command="/weather", description="üå¶Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ"), "access": "all"}
    ]

async def on_startup(data):
    logger.info("–ú–æ–¥—É–ª—å weather_module –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(data):
    logger.info("–ú–æ–¥—É–ª—å weather_module –∑–∞–≤–µ—Ä—à—ë–Ω")

def get_module_info():
    return {
        "name": "weather",
        "display_name": DISPLAY_NAME,
        "description": DESCRIPTION,
        "global_params": GLOBAL_PARAMETERS,
        "user_params": USER_PARAMETERS
    }
