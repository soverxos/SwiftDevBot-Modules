import json
import logging
import os
import requests
from aiogram import types
from aiogram.filters import Command
from core.modules import get_loaded_modules

logger = logging.getLogger("weather_module")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É api.json
API_JSON_PATH = os.path.join(os.path.dirname(__file__), "api.json")

# –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ –∏–∑ api.json
def load_api_key():
    try:
        with open(API_JSON_PATH, "r", encoding="utf-8") as f:
            api_data = json.load(f)
            return api_data.get("WEATHER_API_KEY")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–∞ –∏–∑ api.json: {e}")
        return None

WEATHER_API_KEY = load_api_key()
if not WEATHER_API_KEY:
    logger.error("WEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ api.json!")
    raise ValueError("WEATHER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ api.json!")

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API OpenWeatherMap
WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/weather"

def setup(kernel_data):
    dp = kernel_data["dp"]
    dp.message.register(weather_command, Command("weather"))
    logger.info("–ú–æ–¥—É–ª—å –ø–æ–≥–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

async def weather_command(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
        return

    city = args[1]
    try:
        weather_data = await get_weather(city)
        if weather_data:
            response = format_weather_response(weather_data)
            await message.answer(response)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")

async def get_weather(city: str):
    params = {
        "q": city,
        "appid": WEATHER_API_KEY,
        "units": "metric",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
        "lang": "ru"        # –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ - —Ä—É—Å—Å–∫–∏–π
    }
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {params}")
        response = requests.get(WEATHER_API_URL, params=params)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.json()}")
        return response.json()
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–æ–≥–æ–¥—ã: {e}")
        logger.error(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text if e.response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
        return None

def format_weather_response(weather_data):
    city = weather_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    temp = round(weather_data["main"].get("temp", 0))  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    feels_like = round(weather_data["main"].get("feels_like", 0))  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
    humidity = weather_data["main"].get("humidity", "N/A")
    wind_speed = weather_data["wind"].get("speed", "N/A")
    weather_description = weather_data["weather"][0].get("description", "N/A")

    response = (
        f"üåç –ì–æ—Ä–æ–¥: {city}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
        f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather_description.capitalize()}"
    )
    return response

def get_commands():
    return [types.BotCommand(command="/weather", description="üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")]